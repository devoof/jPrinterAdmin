/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jprinteradmin;

import Settings.IpareaSettings;
import Settings.RequestValuesSettings;
import Settings.planer;
import getPrinterData.getPrinterValues;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JTable;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author stefan
 */
public class mainWindow extends javax.swing.JFrame {

    public static boolean connSetVisible = false;
    public static boolean ipareaSettingsVisible = false;
    public static boolean printerTypeVisible = false;
    public static boolean requestValuesVisible = false;
    public static boolean requestValuesSettingsVisible = false;
    public static RequestValuesSettings rvs;

    /**
     * Creates new form mainWindow
     */
    public mainWindow() {
        //System.out.println("APPDATA:" + utility.defaultDirectory());
        initComponents();
        this.checkdb();
    }

    public final void checkdb() {
        if (database.databaseState != 4) {
            jMenuItemRequestSettings.setEnabled(false);
            jMenuItemPrinterTypes.setEnabled(false);
            jMenuItemNetwork.setEnabled(false);
            this.jMenuItemGeneralSettings.setEnabled(false);
            jMenuPlaner.setEnabled(false);
            jMenuReports.setEnabled(false);
            jMenuExtras.setEnabled(false);
        } else {
            jMenuItemRequestSettings.setEnabled(true);
            jMenuItemPrinterTypes.setEnabled(true);
            jMenuItemNetwork.setEnabled(true);
            this.jMenuItemGeneralSettings.setEnabled(true);
            jMenuPlaner.setEnabled(true);
            jMenuReports.setEnabled(true);
            jMenuExtras.setEnabled(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();
        readPrData = new javax.swing.JButton();
        statusBar = new javax.swing.JPanel();
        statusBarLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxFieldname = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldValue = new javax.swing.JTextField();
        jButtonChangeSelected = new javax.swing.JButton();
        jTextFieldSearch = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButtonDelSel = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenuNetwork = new javax.swing.JMenu();
        jMenuItemConnection = new javax.swing.JMenuItem();
        jMenuItemNetwork = new javax.swing.JMenuItem();
        jMenuItemPrinterTypes = new javax.swing.JMenuItem();
        jMenuItemRequestSettings = new javax.swing.JMenuItem();
        jMenuItemGeneralSettings = new javax.swing.JMenuItem();
        jMenuPlaner = new javax.swing.JMenu();
        jMenuItemCreatePlaner = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuReports = new javax.swing.JMenu();
        jMenuItemManageReports = new javax.swing.JMenuItem();
        jMenuExtras = new javax.swing.JMenu();
        jMenuItemSnmpWalk = new javax.swing.JMenuItem();
        jMenuItemViewLocks = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("jPrinterAdmin " + utility.appVersion);
        setFocusCycleRoot(false);
        setFocusTraversalPolicyProvider(true);
        setIconImage(new ImageIcon( this.getClass().getResource("images/icon.png" ) ).getImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jToolBar1.setRollover(true);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("jprinteradmin/language_de_DE"); // NOI18N
        readPrData.setText(bundle.getString("READ PRINTER DATA")); // NOI18N
        readPrData.setFocusable(false);
        readPrData.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        readPrData.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        readPrData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readPrDataActionPerformed(evt);
            }
        });
        jToolBar1.add(readPrData);

        statusBar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout statusBarLayout = new javax.swing.GroupLayout(statusBar);
        statusBar.setLayout(statusBarLayout);
        statusBarLayout.setHorizontalGroup(
            statusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusBarLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        statusBarLayout.setVerticalGroup(
            statusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusBarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(statusBarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel1.setText(bundle.getString("FIELD:")); // NOI18N

        jLabel2.setText(bundle.getString("VALUE:")); // NOI18N

        jButtonChangeSelected.setText(bundle.getString("CHANGE SELECTED")); // NOI18N
        jButtonChangeSelected.setEnabled(false);
        jButtonChangeSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChangeSelectedActionPerformed(evt);
            }
        });

        jTextFieldSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldSearchKeyReleased(evt);
            }
        });

        java.util.ResourceBundle bundle1 = java.util.ResourceBundle.getBundle("jprinteradmin/language"); // NOI18N
        jLabel3.setText(bundle1.getString("SEARCH")); // NOI18N

        jButtonDelSel.setText(bundle.getString("DELETE SELECTED")); // NOI18N
        jButtonDelSel.setEnabled(false);
        jButtonDelSel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelSelActionPerformed(evt);
            }
        });

        jButtonCancel.setText(bundle.getString("CANCEL")); // NOI18N
        jButtonCancel.setEnabled(false);
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jButton1.setText(bundle1.getString("RELOAD")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic(java.util.ResourceBundle.getBundle("jprinteradmin/language_de_DE").getString("F").charAt(0));
        fileMenu.setText(bundle1.getString("FILE")); // NOI18N
        fileMenu.setActionCommand(bundle.getString("FILE")); // NOI18N

        openMenuItem.setMnemonic('o');
        openMenuItem.setText(bundle1.getString("EXPORT")); // NOI18N
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText(bundle.getString("IMPORT")); // NOI18N
        fileMenu.add(saveMenuItem);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText(bundle.getString("PRINT")); // NOI18N
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem6);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText(bundle1.getString("EXIT")); // NOI18N
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        jMenuNetwork.setMnemonic(java.util.ResourceBundle.getBundle("jprinteradmin/language_de_DE").getString("S").charAt(0));
        jMenuNetwork.setText(bundle1.getString("SETTINGS")); // NOI18N

        jMenuItemConnection.setText(bundle1.getString("CONNECTION")); // NOI18N
        jMenuItemConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemConnectionActionPerformed(evt);
            }
        });
        jMenuNetwork.add(jMenuItemConnection);

        jMenuItemNetwork.setText(bundle1.getString("NETWORK")); // NOI18N
        jMenuItemNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNetworkActionPerformed(evt);
            }
        });
        jMenuNetwork.add(jMenuItemNetwork);

        jMenuItemPrinterTypes.setText(bundle1.getString("PRINTER TYPES")); // NOI18N
        jMenuItemPrinterTypes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPrinterTypesActionPerformed(evt);
            }
        });
        jMenuNetwork.add(jMenuItemPrinterTypes);

        jMenuItemRequestSettings.setText(bundle.getString("REQUEST-VALUES SETTINGS")); // NOI18N
        jMenuItemRequestSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRequestSettingsActionPerformed(evt);
            }
        });
        jMenuNetwork.add(jMenuItemRequestSettings);

        jMenuItemGeneralSettings.setText(bundle1.getString("GENERAL SETTINGS")); // NOI18N
        jMenuItemGeneralSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGeneralSettingsActionPerformed(evt);
            }
        });
        jMenuNetwork.add(jMenuItemGeneralSettings);

        menuBar.add(jMenuNetwork);

        jMenuPlaner.setMnemonic(java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("P").charAt(0));
        jMenuPlaner.setText(bundle1.getString("PLANER")); // NOI18N

        jMenuItemCreatePlaner.setText(bundle1.getString("MANAGE-PLANS")); // NOI18N
        jMenuItemCreatePlaner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCreatePlanerActionPerformed(evt);
            }
        });
        jMenuPlaner.add(jMenuItemCreatePlaner);

        jMenuItem1.setText(bundle1.getString("VIEW-LOG")); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenuPlaner.add(jMenuItem1);

        menuBar.add(jMenuPlaner);

        jMenuReports.setMnemonic(java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("R").charAt(0));
        jMenuReports.setText(bundle1.getString("REPORTS")); // NOI18N
        jMenuReports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuReportsActionPerformed(evt);
            }
        });

        jMenuItemManageReports.setText(bundle1.getString("MANAGE-PRINTER-REPORTS")); // NOI18N
        jMenuItemManageReports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemManageReportsActionPerformed(evt);
            }
        });
        jMenuReports.add(jMenuItemManageReports);

        menuBar.add(jMenuReports);

        jMenuExtras.setMnemonic(java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("x").charAt(0));
        jMenuExtras.setText(bundle1.getString("EXTRAS")); // NOI18N

        jMenuItemSnmpWalk.setText(bundle1.getString("SNMP-WALK")); // NOI18N
        jMenuItemSnmpWalk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSnmpWalkActionPerformed(evt);
            }
        });
        jMenuExtras.add(jMenuItemSnmpWalk);

        jMenuItemViewLocks.setText(bundle1.getString("VIEW-LOCKS")); // NOI18N
        jMenuItemViewLocks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemViewLocksActionPerformed(evt);
            }
        });
        jMenuExtras.add(jMenuItemViewLocks);

        menuBar.add(jMenuExtras);

        helpMenu.setMnemonic('h');
        helpMenu.setText(bundle1.getString("HELP")); // NOI18N

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText(bundle1.getString("CONTENTS")); // NOI18N
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText(bundle1.getString("ABOUT")); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(statusBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxFieldname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldValue, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonChangeSelected)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 239, Short.MAX_VALUE)
                        .addComponent(jButtonDelSel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCancel))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jButtonCancel)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonChangeSelected)
                    .addComponent(jTextFieldValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxFieldname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jButtonDelSel))
                .addGap(18, 18, 18)
                .addComponent(statusBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        try {
            database.conn.close();
            System.out.println("conn closed"); //NOI18N
        } catch (SQLException ex) {
            System.out.println(java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("ERR:") + ex.getStackTrace());
            Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jMenuItemConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemConnectionActionPerformed
        System.out.println("Settings -> Connection"); //NOI18N
        Settings.ConnSet cs = new Settings.ConnSet(this, true);

        cs.setVisible(true);
    }//GEN-LAST:event_jMenuItemConnectionActionPerformed

    private void jMenuItemNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNetworkActionPerformed
        System.out.println("performed");
        Settings.IpareaSettings ips = new Settings.IpareaSettings(this, true);
        this.setEnabled(false);
        ips.setVisible(true);

    }//GEN-LAST:event_jMenuItemNetworkActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            if (database.conn != null) {
                database.conn.close();
                System.out.println("conn closed"); //NOI18N
            }
        } catch (SQLException ex) {
            System.out.println("err:" + ex.getStackTrace()); //NOI18N
            Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
            System.exit(0);
        }



    }//GEN-LAST:event_formWindowClosing

    private void readPrDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readPrDataActionPerformed
        getPrinterValues gpd = new getPrinterValues();
        Executor executor = Executors.newSingleThreadExecutor();
        executor.execute(new getPrinterValues());
        getDBValues();
    }//GEN-LAST:event_readPrDataActionPerformed

    private void jMenuItemRequestSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRequestSettingsActionPerformed
        System.out.println("Settings -> RequestValuesSettings"); //NOI18N
        this.setEnabled(false);

        rvs = new Settings.RequestValuesSettings(this, true);
        rvs.setVisible(true);

    }//GEN-LAST:event_jMenuItemRequestSettingsActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        try {
            if (!jTable1.print()) {
                System.err.println("User cancelled printing"); //NOI18N
            }
        } catch (java.awt.print.PrinterException e) {
            System.err.format("Cannot print %s%n", e.getMessage()); //NOI18N
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jTextFieldSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSearchKeyReleased
        this.getDBValues();
        if (this.jTextFieldSearch.getText().length() > 0) {
            this.jButtonCancel.setEnabled(true);
        } else {
            this.jButtonCancel.setEnabled(false);
        }
    }//GEN-LAST:event_jTextFieldSearchKeyReleased

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (this.jTable1.getSelectedRows().length > 0) {
            this.jButtonChangeSelected.setEnabled(true);
            this.jButtonDelSel.setEnabled(true);
        } else {
            this.jButtonChangeSelected.setEnabled(false);
            this.jButtonDelSel.setEnabled(false);
        }
        if (evt.getClickCount() == 2) {
            System.out.println("double click"); //NOI18N
            printerWindow prW = new printerWindow(this, false);
            prW.printerId = printerIds.get(this.jTable1.convertRowIndexToModel(jTable1.getSelectedRow()));
            prW.getDBValues(prW);
            //this.setEnabled(false);
            prW.setVisible(true);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        this.jTextFieldSearch.setText(""); //NOI18N
        this.getDBValues();
        this.jButtonCancel.setEnabled(false);
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonDelSelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelSelActionPerformed
        int countPrinter = 0;
        int countValues = 0;
        int countCounterValues = 0;
        try {

            for (int i = 0; i < this.jTable1.getSelectedRows().length; i++) {
                int id;
                id = printerIds.get(this.jTable1.convertRowIndexToModel(jTable1.getSelectedRows()[i]));

                Statement stat = database.conn.createStatement();
                countPrinter += stat.executeUpdate("DELETE FROM PRINTER WHERE id=" + id); //NOI18N //NOI18N
                countValues += stat.executeUpdate("DELETE FROM PRINTER_VALUES WHERE printer_id=" + id); //NOI18N
                countCounterValues += stat.executeUpdate("DELETE FROM PRINTER_COUNTER_VALUES WHERE printer_id=" + id);  //NOI18N //NOI18N //NOI18N //NOI18N

            }
            this.getDBValues();
            this.statusBarLabel.setText(countPrinter + " " + java.util.ResourceBundle.getBundle("jprinteradmin/language_de_DE").getString("PRINTERS DELETED") + "; " + countValues + " " + "Request-Values deleted" + "; " + countCounterValues + " " + "Request-Counter-Values deleted");

        } catch (SQLException ex) {
            Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
            this.statusBarLabel.setText("An error occurred:" + " " + ex.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButtonDelSelActionPerformed

    private void jButtonChangeSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChangeSelectedActionPerformed
        int countValues = 0;
        int fieldid = fieldIds.get(this.jComboBoxFieldname.getSelectedIndex());
        try {
            for (int i = 0; i < this.jTable1.getSelectedRows().length; i++) {
                int id = printerIds.get(this.jTable1.convertRowIndexToModel(jTable1.getSelectedRows()[i]));
                int countValue;
                Statement stat = database.conn.createStatement();
                countValue = stat.executeUpdate("UPDATE PRINTER_VALUES SET request_value = '" + this.jTextFieldValue.getText() + "' WHERE printer_id=" + id + " AND request_value_id = " + fieldid);
                if (countValue == 0) {
                    countValue = stat.executeUpdate("INSERT INTO PRINTER_VALUES (printer_id, request_value_id, request_value) VALUES (" + id + ", " + fieldid + ", '" + this.jTextFieldValue.getText() + "')");
                }
                countValues += countValue;
                System.out.println("UPDATE PRINTER_VALUES SET request_value = '" + this.jTextFieldValue.getText() + "' WHERE printer_id=" + id + " AND request_value_id = " + fieldid);
            }
            this.getDBValues();
            this.statusBarLabel.setText(countValues + " " + "fields changed");

        } catch (SQLException ex) {
            Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
            this.statusBarLabel.setText("An error occurred:" + " " + ex.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButtonChangeSelectedActionPerformed

    private void jMenuItemGeneralSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGeneralSettingsActionPerformed
        Settings.GlobalSettings gls = new Settings.GlobalSettings(this, true);

        //printerWindow.getDBValues(prW);
        this.setEnabled(false);
        gls.setVisible(true);
    }//GEN-LAST:event_jMenuItemGeneralSettingsActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.getDBValues();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItemCreatePlanerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCreatePlanerActionPerformed
        this.setEnabled(false);
        planer planerWindow = new planer(this, true);

    }//GEN-LAST:event_jMenuItemCreatePlanerActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        this.setEnabled(false);
        viewPlanerLog viewLogWindows = new viewPlanerLog(this, true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItemPrinterTypesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPrinterTypesActionPerformed
        Settings.printerTypes pt = new Settings.printerTypes(this, true);
        this.setEnabled(false);
        pt.setVisible(true);
    }//GEN-LAST:event_jMenuItemPrinterTypesActionPerformed

    private void jMenuItemSnmpWalkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSnmpWalkActionPerformed
        snmpWalkWindow sww = new snmpWalkWindow(this, true);
    }//GEN-LAST:event_jMenuItemSnmpWalkActionPerformed

    private void jMenuItemViewLocksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemViewLocksActionPerformed
        viewLockTable vlt = new viewLockTable(this, true);
    }//GEN-LAST:event_jMenuItemViewLocksActionPerformed

    private void jMenuReportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuReportsActionPerformed
        Reports.ManagePrinterReports rms = new Reports.ManagePrinterReports(this, true);
        rms.setVisible(true);
    }//GEN-LAST:event_jMenuReportsActionPerformed

    private void jMenuItemManageReportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemManageReportsActionPerformed
        Reports.ManagePrinterReports mrw = new Reports.ManagePrinterReports(this, true);
        mrw.setVisible(true);
    }//GEN-LAST:event_jMenuItemManageReportsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) { //NOI18N
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {

                new mainWindow().setVisible(true);

            }
        });
    }

    public void getDBValues() {
        try {
            Statement st = database.conn.createStatement();
            ResultSet rsFields = st.executeQuery("SELECT id, name FROM REQUEST_VALUES INNER JOIN REQUEST_METHOD_VALUES ON"
                    + " id = request_values_id WHERE kind = 'userdefined'"); //NOI18N
            this.jComboBoxFieldname.removeAllItems();
            fieldIds.clear();
            while (rsFields.next()) {
                fieldIds.add(rsFields.getInt(1));
                this.jComboBoxFieldname.addItem(rsFields.getString(2));
            }

            String mainQuery = "SELECT DISTINCT PRINTER.id, firstSeen, lastSeen FROM PRINTER"; //NOI18N
            if (this.jTextFieldSearch.getText().length() > 0) {
                mainQuery += " INNER JOIN PRINTER_VALUES ON PRINTER_VALUES.printer_id = PRINTER.id"
                        + " INNER JOIN REQUEST_VALUES ON REQUEST_VALUES.id = PRINTER_VALUES.request_value_id " //NOI18N
                        + " WHERE request_value LIKE '%" + this.jTextFieldSearch.getText() + "%' AND " + utility.dbQuotes + "search" + utility.dbQuotes + "=1"; //NOI18N
            }
            ResultSet rs = st.executeQuery(mainQuery); //NOI18N
            ArrayList<String[]> list = new ArrayList<>();
            ArrayList<String> list2 = new ArrayList<>();
            ArrayList<String> list3 = new ArrayList<>();
            ArrayList<String> kinds = new ArrayList<>();
            int ii2 = 0;
            printerIds.clear();
            while (rs.next()) {
                printerIds.add(rs.getInt(1));
                String query = "SELECT DISTINCT REQUEST_VALUES.name, request_value, REQUEST_METHOD_VALUES.kind,"
                        + " REQUEST_METHOD_VALUES.request_method_values_x_id, REQUEST_VALUES.type FROM "
                        + "REQUEST_VALUES LEFT JOIN "
                        + "PRINTER_VALUES ON ((PRINTER_VALUES.request_value_id = REQUEST_VALUES.id OR PRINTER_VALUES.request_value_id IS NULL) AND PRINTER_VALUES.printer_id=" + rs.getInt(1) + ")"
                        + "LEFT JOIN  REQUEST_METHOD_VALUES ON REQUEST_METHOD_VALUES.request_values_id = REQUEST_VALUES.id AND REQUEST_METHOD_VALUES.kind='internal'"
                        + " WHERE REQUEST_VALUES." + utility.dbQuotes + "view" + utility.dbQuotes + " = 1 ORDER BY REQUEST_VALUES." + utility.dbQuotes + "order" + utility.dbQuotes + "";

                Statement st2 = database.conn.createStatement();
                ResultSet rs2 = st2.executeQuery(query);
                list2.clear();

                while (rs2.next()) {
                    if (ii2 == 0) {
                        list3.add(rs2.getString(1));
                        kinds.add(rs2.getString(5));
                    }
                    if ("internal".equals(rs2.getString(3)) && rs2.getInt(4) == 2) {
                        list2.add(rs.getString(2));
                    } else if ("internal".equals(rs2.getString(3)) && rs2.getInt(4) == 3) {
                        list2.add(rs.getString(3));
                    } else if (rs2.getString(2) != null) {
                        list2.add(rs2.getString(2));
                    } else {
                        list2.add("");
                    }

                }
                ii2++;
                int size = list2.size();
                String[] ins = new String[size];
                for (int i = 0; i < size; i++) {
                    ins[i] = list2.get(i);
                }
                list.add(ins);
                this.statusBarLabel.setText(ii2 + " " + java.util.ResourceBundle.getBundle("jprinteradmin/language_de_DE").getString("PRINTER FOUND"));
                //list.add(new String []{rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4)});

            }
            int size = list3.size();
            final Class[] types = new Class[size];
            String[] ins2 = new String[size];
            final boolean[] canEdit = new boolean[size];
            for (int i = 0; i < size; i++) {
                ins2[i] = list3.get(i);
                canEdit[i] = false;
                if (kinds.get(i).equals("Integer")) {
                    types[i] = java.lang.Number.class;
                } else {
                    types[i] = java.lang.String.class;
                }
            }

            Object[][] obj = new Object[list.size()][size];
            for (int ii = 0; ii < list.size(); ii++) {
                obj[ii] = (String[]) list.get(ii);

            }
            jTable1.setAutoCreateRowSorter(true);
            jTable1.updateUI();
            //dialog.jTable1.removeAll();
            jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    obj,
                    ins2) {
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types[columnIndex];
                }

                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });
            int width = 0;
            for (int i = 0; i < jTable1.getColumnCount(); i++) {
                packColumn(jTable1, i, 1);
            }
            jTable1.setUpdateSelectionOnSort(true);
        } catch (SQLException ex) {
            Logger.getLogger(IpareaSettings.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void packColumn(JTable table, int vColIndex, int margin) {
        DefaultTableColumnModel colModel = (DefaultTableColumnModel) table.getColumnModel();
        TableColumn col = colModel.getColumn(vColIndex);
        int width = 0;

        // Get width of column header
        TableCellRenderer renderer = col.getHeaderRenderer();
        if (renderer == null) {
            renderer = table.getTableHeader().getDefaultRenderer();
        }
        java.awt.Component comp = renderer.getTableCellRendererComponent(
                table, col.getHeaderValue(), false, false, 0, 0);
        width = comp.getPreferredSize().width;

        // Get maximum width of column data
        for (int r = 0; r < table.getRowCount(); r++) {
            renderer = table.getCellRenderer(r, vColIndex);
            comp = renderer.getTableCellRendererComponent(
                    table, table.getValueAt(r, vColIndex), false, false, r, vColIndex);
            width = Math.max(width, comp.getPreferredSize().width);
        }

        // Add margin
        width += 2 * margin;

        // Set the width
        col.setPreferredWidth(width);
    }
    public static List<Integer> printerIds = new ArrayList<>();
    public static List<Integer> fieldIds = new ArrayList<>();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonChangeSelected;
    private javax.swing.JButton jButtonDelSel;
    private javax.swing.JComboBox jComboBoxFieldname;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenuExtras;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItemConnection;
    private javax.swing.JMenuItem jMenuItemCreatePlaner;
    private javax.swing.JMenuItem jMenuItemGeneralSettings;
    private javax.swing.JMenuItem jMenuItemManageReports;
    private javax.swing.JMenuItem jMenuItemNetwork;
    private javax.swing.JMenuItem jMenuItemPrinterTypes;
    private javax.swing.JMenuItem jMenuItemRequestSettings;
    private javax.swing.JMenuItem jMenuItemSnmpWalk;
    private javax.swing.JMenuItem jMenuItemViewLocks;
    private javax.swing.JMenu jMenuNetwork;
    private javax.swing.JMenu jMenuPlaner;
    private javax.swing.JMenu jMenuReports;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldSearch;
    private javax.swing.JTextField jTextFieldValue;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    public javax.swing.JButton readPrData;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JPanel statusBar;
    public javax.swing.JLabel statusBarLabel;
    // End of variables declaration//GEN-END:variables
}
