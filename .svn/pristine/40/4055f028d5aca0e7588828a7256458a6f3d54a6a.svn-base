/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jprinteradmin;

import java.awt.Color;
import java.awt.Component;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;

/**
 *
 * @author stefan
 */
public class printerWindow extends javax.swing.JDialog {

    public static String ip;

    public printerWindow(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        initComponents();

        final printerWindow dialog = this;


        ListSelectionModel cellSelectionModel = jTable1.getSelectionModel();
        cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        cellSelectionModel.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (e.getValueIsAdjusting() == true) {
                    jTable1selectedRowChanged();
                }
            }
        });
        this.setLocation(100, 100);



    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldValue = new javax.swing.JTextField();
        jButtonUpdate = new javax.swing.JButton();
        statusBar = new javax.swing.JPanel();
        statusBarLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxCounterValues = new javax.swing.JComboBox();
        jTextFieldAverageFrom = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldAverageTo = new javax.swing.JTextField();
        jTextFieldAverage = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("jprinteradmin/language"); // NOI18N
        setTitle(bundle.getString("PRINTER-WINDOW")); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                formPropertyChange(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setText(bundle.getString("VALUE")); // NOI18N

        jButtonUpdate.setText(bundle.getString("UPDATE")); // NOI18N
        jButtonUpdate.setEnabled(false);
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        statusBar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout statusBarLayout = new javax.swing.GroupLayout(statusBar);
        statusBar.setLayout(statusBarLayout);
        statusBarLayout.setHorizontalGroup(
            statusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusBarLayout.createSequentialGroup()
                .addComponent(statusBarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        statusBarLayout.setVerticalGroup(
            statusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusBarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusBarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable2.getTableHeader().setReorderingAllowed(false);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable2);

        jLabel1.setText(bundle.getString("PRINTER-VALUES")); // NOI18N

        jLabel3.setText(bundle.getString("COUNTER-VALUES")); // NOI18N

        jComboBoxCounterValues.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxCounterValuesItemStateChanged(evt);
            }
        });

        jTextFieldAverageFrom.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        jTextFieldAverageFrom.setEnabled(false);

        jLabel5.setText(bundle.getString("TO")); // NOI18N

        jTextFieldAverageTo.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        jTextFieldAverageTo.setEnabled(false);

        jTextFieldAverage.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        jTextFieldAverage.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldAverage.setEnabled(false);

        jLabel6.setText(bundle.getString(": Ã˜")); // NOI18N

        jLabel7.setText(bundle.getString("FROM")); // NOI18N

        jButton1.setText(bundle.getString("SNMP-WALK")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldValue, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonUpdate)
                        .addGap(23, 23, 23)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxCounterValues, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldAverageFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldAverageTo, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldAverage, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jComboBoxCounterValues, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonUpdate)
                            .addComponent(jLabel2))
                        .addGap(17, 17, 17))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldAverage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(jTextFieldAverageTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jTextFieldAverageFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))))
                .addComponent(statusBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void jTable1selectedRowChanged() {
        if (this.jTable1.getSelectedRow() >= 0) {
            if (jTable1.getValueAt(jTable1.getSelectedRow(), 1) != null) {
                jTextFieldValue.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString());
            } else {
                jTextFieldValue.setText("");
            }
            if ("userdefined".equals(printerWindow.RequestMethodKinds.get(jTable1.convertRowIndexToModel(jTable1.getSelectedRow())))) {
                jButtonUpdate.setEnabled(true);
                System.out.println("Treffer"); //NOI18N
            } else {
                jButtonUpdate.setEnabled(false);
            }
        }
        ColorTableCellRenderer ctr=new ColorTableCellRenderer();
        jTable1.getColumnModel().getColumn(0).setCellRenderer(ctr);
        jTable1.getColumnModel().getColumn(1).setCellRenderer(ctr);
        
        if (jTable1.getSelectedRows().length == 1){

            for (int i=0; i < printerWindow.RequestMethodKinds.size(); i++){
                if ("userdefined".equals(printerWindow.RequestMethodKinds.get(i))){
                    ctr.setColor(i, 0, Color.yellow);
                    ctr.setColor(i, 1, Color.yellow);
                }
            }  
            ctr.setColor(jTable1.getSelectedRow(), 0, Color.GRAY);
            ctr.setColor(jTable1.getSelectedRow(), 1, Color.GRAY);            
        }
        
    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        jprinteradmin.JPrinterAdmin.mw.setEnabled(true);
        System.out.println("closing");
        mainWindow.ipareaSettingsVisible = false;
    }//GEN-LAST:event_formWindowClosing

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        try {
            int vid = printerWindow.valueIDs.get(jTable1.convertRowIndexToModel(jTable1.getSelectedRow()));
            System.out.println(jTable1.convertRowIndexToModel(jTable1.getSelectedRow()));
            String updateQuery = "UPDATE PRINTER_VALUES SET request_value = '" + this.jTextFieldValue.getText() + "' WHERE printer_id = " + printerId + " AND request_value_id =" + vid; //NOI18N
            Statement st = database.conn.createStatement();
            if (st.executeUpdate(updateQuery) == 0) {
                String insertQuery = "INSERT INTO PRINTER_VALUES (printer_id, request_value_id,request_value) VALUES (" + printerId + ", " + vid + ", '" + this.jTextFieldValue.getText() + "')";
                st.executeUpdate(insertQuery);
            }
            getDBValues(this);
            statusBarLabel.setText(java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("DATASET CHANGED"));
        } catch (SQLException ex) {
            statusBarLabel.setText(java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("UPDATE FAILED"));
        }
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void formPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_formPropertyChange
        System.out.println("hallo" + evt.getNewValue().toString()); //NOI18N
    }//GEN-LAST:event_formPropertyChange

    public class ColorTableCellRenderer implements TableCellRenderer
    {
    private HashMap<Integer,Color> cellData=new HashMap<Integer,Color>();
    @Override
    public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column)
        {
        JLabel label=new JLabel((String)value);
        int key=((row+1)*1000)+column;
        label.setOpaque(true);
        if(cellData.containsKey(key))
            {
            label.setBackground(cellData.get(key));
            }
        else //Standardfarbe setzen
            {
            label.setBackground(label.getBackground());
            }
        return label;
        }
    public void setColor(int row,int column,Color color)
        {
        int key=((row+1)*1000)+column;
        cellData.put(key,color);
        }
    }    
    
    private void jComboBoxCounterValuesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxCounterValuesItemStateChanged
        if (this.jComboBoxCounterValues.getSelectedIndex() != -1) {
            ArrayList<String[]> list = new ArrayList<>();
            int rvId = printerWindow.counterValueIDs.get(this.jComboBoxCounterValues.getSelectedIndex());
            String statement = "select " + utility.dbQuotes + "time" + utility.dbQuotes + ", requestvalue from PRINTER_COUNTER_VALUES WHERE printer_id = " + this.printerId + " AND request_value_id = " + rvId + " order by " + utility.dbQuotes + "time" + utility.dbQuotes + " asc"; //NOI18N
            try {
                Statement st = database.conn.createStatement();
                ResultSet rs = st.executeQuery(statement);
                Integer preValue = null;
                java.util.Date preDate = null;
                Long between = null;
                Double betweenInDays = null;
                Double averagePerDay = null;
                Double averagePerDayRounded = null;
                int betweenCounter = 0;
                int i = 0;
                while (rs.next()) {
                    try {
                        java.util.Date date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rs.getString(1)); //NOI18N
                        if (preValue != null) {
                            between = (preDate.getTime() - date.getTime());
                            betweenCounter = preValue - rs.getInt(2);
                        }
                        if (between != null) {
                            betweenInDays = Double.valueOf(between) / 86400000;
                            averagePerDay = betweenCounter / betweenInDays;
                            averagePerDayRounded = Double.valueOf(Math.round(averagePerDay * 100) / 100.0);

                        }

                        if (i == 0) {
                            firstValue = rs.getInt(2);
                            firstDate = date;
                            i++;
                        }
                        list.add(new String[]{rs.getString(1), String.valueOf(rs.getInt(2)), String.valueOf(averagePerDayRounded)});
                        preValue = rs.getInt(2);
                        preDate = date;
                    } catch (ParseException ex2) {
                        Logger.getLogger(printerWindow.class.getName()).log(Level.SEVERE, null, ex2);
                    }

                }
                if (null != preValue) {
                    lastValue = preValue;
                    lastDate = preDate;
                } else {
                    lastValue = 0;
                    firstValue = 0;
                }
            } catch (SQLException ex) {
                Logger.getLogger(printerWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            //Collections.sort(list,new listComparer());

            Object[][] obj = new Object[list.size()][8];
            for (int ii = 0; ii < list.size(); ii++) {
                obj[ii] = (String[]) list.get(ii);
            }
            this.jTable2.setAutoCreateRowSorter(true);
            this.jTable2.updateUI();

            //dialog.jTable1.removeAll();
            this.jTable2.setModel(new javax.swing.table.DefaultTableModel(
                    obj,
                    new String[]{
                java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("DATE"), java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("REQUEST-VALUE"), java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("AVERAGE")
            }) {
                Class[] types = new Class[]{
                    java.lang.String.class,
                    java.lang.String.class,
                    java.lang.Integer.class,};
                boolean[] canEdit = new boolean[]{
                    false, false, false
                };

                @Override
                public Class getColumnClass(int columnIndex) {
                    return types[columnIndex];
                }

                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });
        }
        RowSorter sorter = jTable2.getRowSorter();
        List sortKeys = new ArrayList();
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.DESCENDING));
        sorter.setSortKeys(sortKeys);
        this.setAverageFields();
    }//GEN-LAST:event_jComboBoxCounterValuesItemStateChanged

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        this.setAverageFields();

    }//GEN-LAST:event_jTable2MouseClicked

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        jTable1selectedRowChanged();
    }//GEN-LAST:event_jTable1KeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        snmpWalkWindow sww;
        sww = new snmpWalkWindow(this, true);

    }//GEN-LAST:event_jButton1ActionPerformed
    public static int firstValue;
    public static int lastValue;
    public static java.util.Date firstDate;
    public static java.util.Date lastDate;
    public static ArrayList<String[]> requestMethodArray = new ArrayList<>();

    public void setAverageFields() {
        Integer value1 = null;
        Integer value2 = null;
        java.util.Date date1 = null;
        java.util.Date date2 = null;
        String date1String = null;
        String date2String = null;
        Long between = null;
        Double betweenInDays = null;
        Double averagePerDay = null;
        Double averagePerDayRounded = null;
        int betweenCounter = 0;
        if (this.jTable2.getSelectedRowCount() == 2) {
            try {
                value1 = Integer.parseInt(this.jTable2.getValueAt(this.jTable2.getSelectedRows()[0], 1).toString());
                value2 = Integer.parseInt(this.jTable2.getValueAt(this.jTable2.getSelectedRows()[1], 1).toString());
                date1String = this.jTable2.getValueAt(this.jTable2.getSelectedRows()[0], 0).toString();
                date2String = this.jTable2.getValueAt(this.jTable2.getSelectedRows()[1], 0).toString();
                date1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(date1String);             //NOI18N
                date2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(date2String); //NOI18N
                this.jTextFieldAverageFrom.setText(date1.toLocaleString());
                this.jTextFieldAverageTo.setText(date2.toLocaleString());
            } catch (ParseException ex) {
                Logger.getLogger(printerWindow.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else if (printerWindow.firstDate != null && printerWindow.lastDate != null) {
            this.jTextFieldAverageFrom.setText(printerWindow.firstDate.toLocaleString());
            this.jTextFieldAverageTo.setText(printerWindow.lastDate.toLocaleString());
            value1 = firstValue;
            value2 = lastValue;
            date1 = firstDate;
            date2 = lastDate;

        }
        if (value1 != null) {
            between = (date1.getTime() - date2.getTime());
            betweenCounter = value1 - value2;
        }
        if (between != null) {
            betweenInDays = Double.valueOf(between) / 86400000;
            averagePerDay = betweenCounter / betweenInDays;
            averagePerDayRounded = Double.valueOf(Math.round(averagePerDay * 100) / 100.0);
        }
        this.jTextFieldAverage.setText(String.valueOf(averagePerDayRounded));

    }

    public void getDBValues(printerWindow dialog) {
        try {
            Statement st = database.conn.createStatement();
            printerWindow.counterValueIDs.clear();
            printerWindow.valueIDs.clear();
            String firstSeen = null;
            String lastSeen = null;
            String printerQuery = "SELECT firstSeen, lastSeen FROM PRINTER WHERE id=" + dialog.printerId;             //NOI18N
            ResultSet rsPrinter = st.executeQuery(printerQuery);
            while (rsPrinter.next()) {
                firstSeen = rsPrinter.getString(1);
                lastSeen = rsPrinter.getString(2);
            }
            String valueQuery = "select DISTINCT " + utility.dbQuotes + "name" + utility.dbQuotes + ", request_value, " + utility.dbQuotes + "counter" + utility.dbQuotes + ", REQUEST_VALUES.id, REQUEST_METHOD_VALUES.kind, REQUEST_METHOD_VALUES.request_method_values_x_id from REQUEST_VALUES LEFT JOIN PRINTER_VALUES ON PRINTER_VALUES.request_value_id = REQUEST_VALUES.id AND (PRINTER_VALUES.printer_id = " + dialog.printerId + " OR PRINTER_VALUES.printer_id IS NULL) LEFT JOIN  REQUEST_METHOD_VALUES ON REQUEST_METHOD_VALUES.request_values_id = REQUEST_VALUES.id AND (kind = 'userdefined' OR kind = 'internal') ORDER BY REQUEST_VALUES." + utility.dbQuotes + "order" + utility.dbQuotes;
            /*String valueQuery = ("select name, request_value, counter, PRINTER_VALUES.request_value_id, REQUEST_METHOD_VALUES.kind," + //NOI18N
             " REQUEST_METHOD_VALUES.request_method_values_x_id "
             + "from REQUEST_VALUES " + //NOI18N
             "LEFT JOIN PRINTER_VALUES ON PRINTER_VALUES.request_value_id = request_values.id AND " + //NOI18N
             "(PRINTER_VALUES.printer_id = " + dialog.printerId + " OR PRINTER_VALUES.printer_id IS NULL)" //NOI18N //NOI18N
             + " LEFT JOIN  REQUEST_METHOD_VALUES ON REQUEST_METHOD_VALUES.request_values_id = REQUEST_VALUES.id OR REQUEST_METHOD_VALUES.request_values_id IS NULL"); //NOI18N */
            ResultSet rs = st.executeQuery(valueQuery);
            ArrayList<String[]> list = new ArrayList<>();
            dialog.jComboBoxCounterValues.removeAllItems();
            while (rs.next()) {

                printerWindow.valueIDs.add(rs.getInt(4));
                printerWindow.RequestMethodKinds.add(rs.getString(5));
                printerWindow.RequestMethodXids.add(rs.getInt(6));
                if ("internal".equals(rs.getString(5)) && rs.getInt(6) == 1) { //NOI18N
                    ip = rs.getString(2);
                }
                if ("1".equals(rs.getString(3))) { //NOI18N
                    printerWindow.counterValueIDs.add(rs.getInt(4));
                    dialog.jComboBoxCounterValues.addItem(rs.getString(1));
                }
                if ("internal".equals(rs.getString(5)) && rs.getInt(6) == 2) { //NOI18N
                    list.add(new String[]{rs.getString(1), firstSeen});
                } else if ("internal".equals(rs.getString(5)) && rs.getInt(6) == 3) { //NOI18N
                    list.add(new String[]{rs.getString(1), lastSeen});
                } else {
                    list.add(new String[]{rs.getString(1), rs.getString(2)});
                }
            }

            Object[][] obj = new Object[list.size()][8];
            for (int ii = 0; ii < list.size(); ii++) {
                obj[ii] = (String[]) list.get(ii);
            }
            dialog.jTable1.setAutoCreateRowSorter(true);
            dialog.jTable1.updateUI();
            //dialog.jTable1.removeAll();
            dialog.jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    obj,
                    new String[]{
                java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("REQUEST-NAME"), java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("REQUEST-VALUE")
            }) {
                Class[] types = new Class[]{
                    java.lang.Integer.class,
                    java.lang.String.class,};
                boolean[] canEdit = new boolean[]{
                    false, false
                };

                @Override
                public Class getColumnClass(int columnIndex) {
                    return types[columnIndex];
                }

                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
                
              
              
            });
            ColorTableCellRenderer ctr=new ColorTableCellRenderer();
            jTable1.getColumnModel().getColumn(0).setCellRenderer(ctr);
            jTable1.getColumnModel().getColumn(1).setCellRenderer(ctr);
            for (int i=0; i < printerWindow.RequestMethodKinds.size(); i++){
                if ("userdefined".equals(printerWindow.RequestMethodKinds.get(i))){
                    ctr.setColor(i, 0, Color.yellow);
                    ctr.setColor(i, 1, Color.yellow);
                }
            }
          
            
        } catch (SQLException ex) {
            Logger.getLogger(printerWindow.class.getName()).log(Level.SEVERE, null, ex);
        }




    }
    public int printerId;
    public static List<Integer> counterValueIDs = new ArrayList<>();
    public static List<Integer> valueIDs = new ArrayList<>();
    public static List<String> RequestMethodKinds = new ArrayList<>();
    public static List<Integer> RequestMethodXids = new ArrayList<>();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JComboBox jComboBoxCounterValues;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextFieldAverage;
    private javax.swing.JTextField jTextFieldAverageFrom;
    private javax.swing.JTextField jTextFieldAverageTo;
    private javax.swing.JTextField jTextFieldValue;
    private javax.swing.JPanel statusBar;
    private javax.swing.JLabel statusBarLabel;
    // End of variables declaration//GEN-END:variables
}
