/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Settings;

import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import jprinteradmin.Utility;

/**
 *
 * @author stefan
 */
public class CreateDatabase extends javax.swing.JDialog {

    /**
     * Creates new form ConnSet
     */
    public CreateDatabase(javax.swing.JDialog parent, boolean modal) {
        super(parent, modal);

        this.setLocation(150, 150);
        initComponents();
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        dbType = new javax.swing.JComboBox();
        dbHost = new javax.swing.JTextField();
        dbPort = new javax.swing.JTextField();
        dbName = new javax.swing.JTextField();
        dbUser = new javax.swing.JTextField();
        save = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        dbAdminUser = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        dbAdminPassword = new javax.swing.JPasswordField();
        dbPassword = new javax.swing.JPasswordField();
        jLabel9 = new javax.swing.JLabel();
        jTextFieldInstance = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("jprinteradmin/language"); // NOI18N
        setTitle(bundle.getString("CREATE NEW DATABASE")); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        java.util.ResourceBundle bundle1 = java.util.ResourceBundle.getBundle("jprinteradmin/language"); // NOI18N
        jLabel1.setText(bundle1.getString("TYPE")); // NOI18N

        jLabel2.setText(bundle1.getString("HOST")); // NOI18N

        jLabel3.setText(bundle1.getString("PORT")); // NOI18N

        jLabel4.setText(bundle1.getString("DATABASE-NAME")); // NOI18N

        jLabel5.setText(bundle1.getString("USER")); // NOI18N

        jLabel6.setText(bundle1.getString("PASSWORD")); // NOI18N

        dbType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "local", "mysql", "mssql" }));
        dbType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dbTypeItemStateChanged(evt);
            }
        });

        dbHost.setToolTipText("");
        dbHost.setEnabled(false);

        dbPort.setEnabled(false);

        dbName.setText(bundle.getString("JPRINTERADMIN")); // NOI18N
        dbName.setEnabled(false);

        dbUser.setEnabled(false);

        save.setText(bundle1.getString("OK")); // NOI18N
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        jLabel7.setText(bundle1.getString("ADMINUSER")); // NOI18N

        dbAdminUser.setEnabled(false);

        jLabel8.setText(bundle1.getString("ADMINPASSWORD")); // NOI18N

        dbAdminPassword.setEnabled(false);

        dbPassword.setEnabled(false);

        jLabel9.setText(bundle1.getString("INSTANCE")); // NOI18N

        jTextFieldInstance.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel7)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel4)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(save)
                    .addComponent(dbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dbHost, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                    .addComponent(dbPort, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dbName)
                    .addComponent(dbUser)
                    .addComponent(dbPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(dbAdminUser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                        .addComponent(dbAdminPassword, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(jTextFieldInstance))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(dbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(dbHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(dbPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextFieldInstance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(dbName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(dbUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(dbPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(dbAdminUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(dbAdminPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(save)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        ConnSet.createDatabaseVisible = false;
    }//GEN-LAST:event_formWindowClosed

    private void dbTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dbTypeItemStateChanged
        if (dbType.getSelectedItem() == "local") {
            dbHost.setEnabled(false);
            dbPort.setEnabled(false);
            dbName.setEnabled(false);
            dbUser.setEnabled(false);
            dbPassword.setEnabled(false);
            dbAdminUser.setEnabled(false);
            dbAdminPassword.setEnabled(false);
        } else {
            dbHost.setEnabled(true);
            dbPort.setEnabled(true);
            dbName.setEnabled(true);
            dbUser.setEnabled(true);
            dbPassword.setEnabled(true);
            dbAdminUser.setEnabled(true);
            dbAdminPassword.setEnabled(true);
            this.jTextFieldInstance.setEnabled(false);
        }
        if (dbType.getSelectedItem() == "mysql") {
            dbPort.setText("3306");
            this.jTextFieldInstance.setEnabled(false);
        }
        if (dbType.getSelectedItem() == "mssql") {
            dbPort.setText("1433");
            this.jTextFieldInstance.setEnabled(true);
        }
    }//GEN-LAST:event_dbTypeItemStateChanged

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        if (dbType.getSelectedItem() == "local") {
            createLocalDB();
        } else if (dbType.getSelectedItem() == "mysql") {
            createmysqlDB();
        } else if (dbType.getSelectedItem() == "mssql") {
            createmssqlDB();
        }
    }//GEN-LAST:event_saveActionPerformed

    private void createLocalDB() {
        Utility.dbQuotes = "\"";
        try {
            Class.forName("org.sqlite.JDBC");
            try (Connection conn = DriverManager.getConnection("jdbc:sqlite:" + jprinteradmin.Utility.defaultDirectory() + File.separator + ".jprinteradmin" + File.separator + "jprinteradmin.db")) {
                createTables(conn);
                fillDB(conn);
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(CreateDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
        Settings.ConnSet.createDatabaseVisible = false;
        this.setVisible(false);
    }

    private void createmysqlDB() {
        Utility.dbQuotes = "`";
        try {
            Class.forName("com.mysql.jdbc.Driver");

            try (Connection conn2 = DriverManager.getConnection("jdbc:mysql://" + Utility.escapeSqlString(this.dbHost.getText()) + ":" + Utility.escapeSqlString(this.dbPort.getText()) + "/mysql?zeroDateTimeBehavior=convertToNull", Utility.escapeSqlString(this.dbAdminUser.getText()), Utility.escapeSqlString(this.dbAdminPassword.getText()))) {
                Statement stat = conn2.createStatement();
                stat.execute("CREATE USER '" + Utility.escapeSqlString(this.dbUser.getText()) + "' IDENTIFIED BY '" + Utility.escapeSqlString(this.dbPassword.getText()) + "'");
                stat.execute("CREATE DATABASE " + Utility.escapeSqlString(this.dbName.getText()));
                stat.execute("use " + Utility.escapeSqlString(this.dbName.getText()));
                createTables(conn2);
                fillDB(conn2);
                stat.execute("GRANT CREATE,ALTER,DELETE,DROP,INSERT,SELECT,UPDATE  ON " + Utility.escapeSqlString(this.dbName.getText()) + ".* TO '" + Utility.escapeSqlString(this.dbUser.getText()) + "'");

            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(CreateDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
        Settings.ConnSet.createDatabaseVisible = false;
        this.setVisible(false);
    }

    private void createmssqlDB() {
        Utility.dbQuotes = "\"";
        try {
            String instance = "";
            Class.forName("net.sourceforge.jtds.jdbc.Driver");
            if (this.jTextFieldInstance.getText().length() > 0 ) {
                instance = ";instance=" + Utility.escapeSqlString(this.jTextFieldInstance.getText());
            }
            try (Connection conn = DriverManager.getConnection("jdbc:jtds:sqlserver://" + Utility.escapeSqlString(this.dbHost.getText()) + ":" + Utility.escapeSqlString(this.dbPort.getText()) + "/master", Utility.escapeSqlString(this.dbAdminUser.getText()), Utility.escapeSqlString(this.dbAdminPassword.getText()))) {
                Statement stat = conn.createStatement();

                stat.execute("CREATE LOGIN " + Utility.escapeSqlString(this.dbUser.getText()) + " WITH PASSWORD = '" + Utility.escapeSqlString(this.dbPassword.getText()) + "'");
                stat.execute("CREATE DATABASE " + Utility.escapeSqlString(this.dbName.getText()));
                stat.execute("use " + Utility.escapeSqlString(this.dbName.getText()));
                stat.execute("CREATE USER " + Utility.escapeSqlString(this.dbUser.getText()) + " FOR LOGIN " + Utility.escapeSqlString(this.dbUser.getText()));

                stat.execute("GRANT ALTER,DELETE,INSERT,SELECT,UPDATE  ON DATABASE::" + Utility.escapeSqlString(this.dbName.getText()) + " TO " + Utility.escapeSqlString(this.dbUser.getText()));
                createTables(conn);
                fillDB(conn);
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(CreateDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
        Settings.ConnSet.createDatabaseVisible = false;
        this.setVisible(false);
    }

    private void createTables(Connection conn) throws SQLException {
        Statement stat = conn.createStatement();
        stat.executeUpdate("CREATE TABLE BASE (name VARCHAR(30), value VARCHAR(30),PRIMARY KEY(name))");
        stat.executeUpdate("CREATE TABLE IP_AREAS (id int NOT NULL, startip varchar(15), endip varchar(15), customer varchar(30), PRIMARY KEY (id))");
        stat.executeUpdate("CREATE TABLE DBLOCKS(" + Utility.dbQuotes + "user" + Utility.dbQuotes + " VARCHAR(20) not null," + Utility.dbQuotes + "table" + Utility.dbQuotes + " VARCHAR(20) not null," + Utility.dbQuotes + "id" + Utility.dbQuotes + " INT not null," + Utility.dbQuotes + "time" + Utility.dbQuotes + " DATETIME, primary key (" + Utility.dbQuotes + "user" + Utility.dbQuotes + ", " + Utility.dbQuotes + "table" + Utility.dbQuotes + ", " + Utility.dbQuotes + "id" + Utility.dbQuotes + "))");
        stat.executeUpdate("CREATE TABLE REQUEST_VALUES (id int NOT NULL, " + Utility.dbQuotes + "name" + Utility.dbQuotes + " VARCHAR(40), " + Utility.dbQuotes + "type" + Utility.dbQuotes + " VARCHAR(10), " + Utility.dbQuotes + "view" + Utility.dbQuotes + " integer, " + Utility.dbQuotes + "search" + Utility.dbQuotes + " int, identification int, " + Utility.dbQuotes + "order" + Utility.dbQuotes + " int, counter int, PRIMARY KEY (id))");
        stat.executeUpdate("CREATE TABLE REQUEST_METHOD (id int NOT NULL, " + Utility.dbQuotes + "name" + Utility.dbQuotes + " VARCHAR(40), defaultMethod int, PRIMARY KEY (id))");
        stat.executeUpdate("CREATE TABLE REQUEST_METHOD_VALUES (request_method_id int NOT NULL, request_values_id int NOT NULL, kind VARCHAR(11) NOT NULL, request_method_values_x_id int not null, PRIMARY KEY (request_method_id, request_values_id))");
        stat.executeUpdate("CREATE TABLE REQUEST_METHOD_VALUES_SNMP (id int NOT NULL, oid VARCHAR(40) NOT NULL,hexStringConversion int null, PRIMARY KEY(id))");
        stat.executeUpdate("CREATE TABLE DEVICE_TYPES (id int NOT NULL, " + Utility.dbQuotes + "name" + Utility.dbQuotes + " VARCHAR(200), request_method_id int, PRIMARY KEY (id))");
        stat.executeUpdate("CREATE TABLE PRINTER (id int NOT NULL, identificationString VARCHAR(150), firstSeen DATETIME NULL, lastSeen DATETIME NULL, PRIMARY KEY (id))");
        stat.executeUpdate("CREATE TABLE PRINTER_COUNTER_VALUES (printer_id int NOT NULL, request_value_id int NOT NULL, " + Utility.dbQuotes + "time" + Utility.dbQuotes + " DATETIME NOT NULL, requestvalue float, PRIMARY KEY (printer_id, request_value_id, " + Utility.dbQuotes + "time" + Utility.dbQuotes + "))");
        stat.executeUpdate("CREATE TABLE PRINTER_VALUES (printer_id int NOT NULL, request_value_id int NOT NULL, request_value VARCHAR(60), PRIMARY KEY (printer_id, request_value_id))");
        stat.executeUpdate("CREATE TABLE REQUEST_METHOD_VALUES_HTML (id int NOT NULL, request_url VARCHAR(60), authentication_url VARCHAR(60), cookie_name VARCHAR(20), " + Utility.dbQuotes + "get" + Utility.dbQuotes + " VARCHAR(5), " + Utility.dbQuotes + "value" + Utility.dbQuotes + " int NOT NULL, tag VARCHAR(20), PRIMARY KEY (id))");
        stat.executeUpdate("CREATE TABLE REQUEST_METHOD_VALUES_HTML_POSTDATA (rmvh_id int NOT NULL, " + Utility.dbQuotes + "variable" + Utility.dbQuotes + " VARCHAR(30) NOT NULL, " + Utility.dbQuotes + "value" + Utility.dbQuotes + " VARCHAR(50), PRIMARY KEY (rmvh_id, " + Utility.dbQuotes + "variable" + Utility.dbQuotes + "))");
        stat.executeUpdate("CREATE TABLE REQUEST_METHOD_VALUES_HTML_STRINGREMOVES (rmvh_id int NOT NULL, String VARCHAR(80) NOT NULL, PRIMARY KEY (rmvh_id, String))");
        stat.executeUpdate("CREATE TABLE SETTINGS_REQUEST (id INT NOT NULL, printer_timeout INT NOT NULL, snmp_community varchar(50) NOT NULL, snmp_version Integer NOT NULL, snmp_timeout Integer NOT NULL, html_timeout Integer NOT NULL, PRIMARY KEY (id) )");
        stat.executeUpdate("CREATE TABLE SETTINGS_EMAIL (id INT NOT NULL, smtp_server VARCHAR(50) NOT NULL, smtp_auth Integer NOT NULL, smtp_username VARCHAR(50) NULL, smtp_password VARCHAR(50) NULL, smtp_starttls Integer NULL, fromAddress VARCHAR(50) NULL, PRIMARY KEY (id) )");
        stat.executeUpdate("CREATE TABLE SCHEDULE (id int NOT NULL, " + Utility.dbQuotes + "type" + Utility.dbQuotes + " int null, values1 VARCHAR(255) null, values2 VARCHAR(255) null, " + Utility.dbQuotes + "name" + Utility.dbQuotes + " VARCHAR(255) null, PRIMARY KEY (id))");
        stat.executeUpdate("CREATE TABLE SCHEDULE_JOBS (schedule_id int, job_id int, " + Utility.dbQuotes + "order" + Utility.dbQuotes + " int)");
        stat.executeUpdate("CREATE TABLE JOBS (id int NOT NULL, " + Utility.dbQuotes + "type" + Utility.dbQuotes + " integer, x_id integer, " + Utility.dbQuotes + "name" + Utility.dbQuotes + " VARCHAR(255) null, PRIMARY KEY (id))");
        stat.executeUpdate("CREATE TABLE SCHEDULE_LOG (id int NOT NULL, startDate datetime, finishedDate datetime, schedule_id int NULL, job_id int NULL, " + Utility.dbQuotes + "result" + Utility.dbQuotes + " VARCHAR(255), PRIMARY KEY (id));");
        stat.executeUpdate("CREATE TABLE REPORT (id INT NOT NULL, " + Utility.dbQuotes + "name" + Utility.dbQuotes + " VARCHAR(30) NOT NULL, heading VARCHAR(50), sort_id INT NOT NULL, linking INT, " + Utility.dbQuotes + "outputAs" + Utility.dbQuotes + " INT NOT NULL, " + Utility.dbQuotes + "exportTo" + Utility.dbQuotes + " int NOT NULL, destination VARCHAR(50) NULL, subtotal INT, PRIMARY KEY (id))");
        stat.executeUpdate("CREATE TABLE REPORT_OUTPUTFIELDS (report_id INT NOT NULL, " + Utility.dbQuotes + "order" + Utility.dbQuotes + " INT NOT NULL, field_id INT NOT NULL, label VARCHAR(30), PRIMARY KEY (" + Utility.dbQuotes + "order" + Utility.dbQuotes + ", report_id))");
        stat.executeUpdate("CREATE TABLE REPORT_COUNTERVALUES (report_id INT NOT NULL, " + Utility.dbQuotes + "order" + Utility.dbQuotes + " INT NOT NULL, field_id INT NOT NULL, period INT NOT NULL, label VARCHAR(30), " + Utility.dbQuotes + "sum" + Utility.dbQuotes + " INT NOT NULL, " + Utility.dbQuotes + "avg" + Utility.dbQuotes + " INT NOT NULL, " + Utility.dbQuotes + "output" + Utility.dbQuotes + " INT NOT NULL, PRIMARY KEY (" + Utility.dbQuotes + "order" + Utility.dbQuotes + ", report_id))");
        stat.executeUpdate("CREATE TABLE REPORT_CONDITIONS (report_id INT NOT NULL, " + Utility.dbQuotes + "order" + Utility.dbQuotes + " INT NOT NULL, field_id INT NOT NULL, operator INT NOT NULL, " + Utility.dbQuotes + "value" + Utility.dbQuotes + " VARCHAR(50), PRIMARY KEY (" + Utility.dbQuotes + "order" + Utility.dbQuotes + ", report_id))");
        stat.executeUpdate("CREATE TABLE EXPORT_JOBS (id int NOT NULL, " + Utility.dbQuotes + "name" + Utility.dbQuotes + " VARCHAR(40), folder VARCHAR(50), keepLast int null, PRIMARY KEY (id))");
        stat.executeUpdate("CREATE TABLE EXPORT_JOB_FILES (id int NOT NULL, export_job_id int, file_url VARCHAR(70), file_date DATETIME, PRIMARY KEY (id))");
    }

    private void fillDB(Connection conn) throws SQLException {
        Statement stat = conn.createStatement();
        stat.executeUpdate("INSERT INTO BASE (name, value) VALUES ('dbversion','" + jprinteradmin.Utility.dbVersion + "')");
        stat.executeUpdate("INSERT INTO BASE (name, value) VALUES ('appversion','" + jprinteradmin.Utility.appVersion + "')");
        stat.executeUpdate("INSERT INTO REQUEST_METHOD (id, " + Utility.dbQuotes + "name" + Utility.dbQuotes + ", defaultMethod) VALUES (0, 'default',1)");
        stat.executeUpdate("INSERT INTO REQUEST_VALUES (id, " + Utility.dbQuotes + "name" + Utility.dbQuotes + ", " + Utility.dbQuotes + "type" + Utility.dbQuotes + ", " + Utility.dbQuotes + "view" + Utility.dbQuotes + ", search, identification, " + Utility.dbQuotes + "order" + Utility.dbQuotes + ", " + Utility.dbQuotes + "counter" + Utility.dbQuotes + ") VALUES ('0', 'devicetype', 'String', 1, 1, 0,1,0)");
        stat.executeUpdate("INSERT INTO REQUEST_VALUES (id, " + Utility.dbQuotes + "name" + Utility.dbQuotes + ", " + Utility.dbQuotes + "type" + Utility.dbQuotes + ", " + Utility.dbQuotes + "view" + Utility.dbQuotes + ", search, identification, " + Utility.dbQuotes + "order" + Utility.dbQuotes + ", " + Utility.dbQuotes + "counter" + Utility.dbQuotes + ") VALUES (1, 'ip', 'String', 1, 1, 0,2,0)");
        stat.executeUpdate("INSERT INTO REQUEST_VALUES (id, " + Utility.dbQuotes + "name" + Utility.dbQuotes + ", " + Utility.dbQuotes + "type" + Utility.dbQuotes + ", " + Utility.dbQuotes + "view" + Utility.dbQuotes + ", search, identification, " + Utility.dbQuotes + "order" + Utility.dbQuotes + ", " + Utility.dbQuotes + "counter" + Utility.dbQuotes + ") VALUES (2, 'counterAll', 'String', 1, 0, 0, 3, 1)");
        stat.executeUpdate("INSERT INTO REQUEST_VALUES (id, " + Utility.dbQuotes + "name" + Utility.dbQuotes + ", " + Utility.dbQuotes + "type" + Utility.dbQuotes + ", " + Utility.dbQuotes + "view" + Utility.dbQuotes + ", search, identification, " + Utility.dbQuotes + "order" + Utility.dbQuotes + ", " + Utility.dbQuotes + "counter" + Utility.dbQuotes + ") VALUES (3, 'serialnumber', 'String', 1, 1, 0,4,0)");
        stat.executeUpdate("INSERT INTO REQUEST_VALUES (id, " + Utility.dbQuotes + "name" + Utility.dbQuotes + ", " + Utility.dbQuotes + "type" + Utility.dbQuotes + ", " + Utility.dbQuotes + "view" + Utility.dbQuotes + ", search, identification, " + Utility.dbQuotes + "order" + Utility.dbQuotes + ", " + Utility.dbQuotes + "counter" + Utility.dbQuotes + ") VALUES (4, 'macAddress', 'String', 1, 1, 1,5,0)");
        stat.executeUpdate("INSERT INTO REQUEST_METHOD_VALUES (request_method_id, request_values_id, kind, request_method_values_x_id) VALUES (0, 2, 'snmp', 1)");
        stat.executeUpdate("INSERT INTO REQUEST_METHOD_VALUES (request_method_id, request_values_id, kind, request_method_values_x_id) VALUES (0, 1, 'internal', 1)");
        stat.executeUpdate("INSERT INTO REQUEST_METHOD_VALUES (request_method_id, request_values_id, kind, request_method_values_x_id) VALUES (0, 3, 'snmp', 2)");
        stat.executeUpdate("INSERT INTO REQUEST_METHOD_VALUES (request_method_id, request_values_id, kind, request_method_values_x_id) VALUES ('0', '0', 'snmp', '0')");
        stat.executeUpdate("INSERT INTO REQUEST_METHOD_VALUES (request_method_id, request_values_id, kind, request_method_values_x_id) VALUES ('0', '4', 'snmp', '3')");
        stat.executeUpdate("INSERT INTO REQUEST_METHOD_VALUES_SNMP (id, oid) VALUES ('0', '1.3.6.1.2.1.25.3.2.1.3.1')");
        stat.executeUpdate("INSERT INTO REQUEST_METHOD_VALUES_SNMP (id, oid) VALUES (1, '1.3.6.1.2.1.43.10.2.1.4.1.1')");
        stat.executeUpdate("INSERT INTO REQUEST_METHOD_VALUES_SNMP (id, oid) VALUES (2, '1.3.6.1.2.1.43.5.1.1.17.1')");
        stat.executeUpdate("INSERT INTO REQUEST_METHOD_VALUES_SNMP (id, oid) VALUES (3, '1.3.6.1.2.1.2.2.1.6.1')");
        stat.executeUpdate("INSERT INTO SETTINGS_EMAIL (id, smtp_server, smtp_auth, smtp_username, smtp_password, smtp_starttls) 	VALUES ('0', '', '1', NULL, NULL, NULL)");
        stat.executeUpdate("INSERT INTO SETTINGS_REQUEST (id, printer_timeout, snmp_community, snmp_version, snmp_timeout, html_timeout) 	VALUES ('0', '1000', 'public',  '2', '3000', '8000');");
        stat.executeUpdate("INSERT INTO JOBS (id, " + Utility.dbQuotes + "type" + Utility.dbQuotes + ", x_id, " + Utility.dbQuotes + "name" + Utility.dbQuotes + ") VALUES (0, 0, 0, 'Read Printer-Data')");

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) { //NOI18N
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateDatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateDatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateDatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateDatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CreateDatabase dialog = new CreateDatabase(new javax.swing.JDialog(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });

                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField dbAdminPassword;
    private javax.swing.JTextField dbAdminUser;
    private javax.swing.JTextField dbHost;
    private javax.swing.JTextField dbName;
    private javax.swing.JPasswordField dbPassword;
    private javax.swing.JTextField dbPort;
    private javax.swing.JComboBox dbType;
    private javax.swing.JTextField dbUser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTextFieldInstance;
    private javax.swing.JButton save;
    // End of variables declaration//GEN-END:variables
}
