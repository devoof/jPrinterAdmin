/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Settings;

import java.awt.Rectangle;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.PlainDocument;
import jprinteradmin.Database;
import jprinteradmin.Database.lock;
import jprinteradmin.MainWindow;
import jprinteradmin.Utility;

/**
 *
 * @author stefan
 */
public final class RequestValuesSettings extends javax.swing.JDialog {

    public RequestValuesSettings(java.awt.Frame parent, boolean modal) {
        super(parent, modal);


        //IpareaSettings dialog = new IpareaSettings(new javax.swing.JFrame(), true);
        initComponents();
        this.jTextFieldRkId.setDocument(createNumericDocumentWithMaxLength(4));
        this.order.setDocument(createNumericDocumentWithMaxLength(4));
        final RequestValuesSettings dialog = this;
        getRequestMethods(0);
        getDBValues(dialog, requestMethods.get(this.jComboBoxRequestMethods.getSelectedIndex()));

        ListSelectionModel cellSelectionModel = jTable1.getSelectionModel();
        cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        cellSelectionModel.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {

                if (e.getValueIsAdjusting() == true) {
                    adjustButtons();
                }
            }
        });
        this.setLocation(100, 100);


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jButtonDelete = new javax.swing.JButton();
        jButtonUpdate = new javax.swing.JButton();
        jButtonAdd = new javax.swing.JButton();
        jButtonNew = new javax.swing.JButton();
        statusBar = new javax.swing.JPanel();
        statusBarLabel = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        datatype = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        searchField = new javax.swing.JCheckBox();
        view = new javax.swing.JCheckBox();
        identity = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        jComboBoxRequestMethods = new javax.swing.JComboBox();
        jCheckBoxDefaultMethod = new javax.swing.JCheckBox();
        jButtonDeleteMethod = new javax.swing.JButton();
        jTextFieldNethodName = new javax.swing.JTextField();
        jButtonAddMethod = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        counter = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jComboBoxRequestKind = new javax.swing.JComboBox();
        jButtonChRkSt = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jTextFieldRkId = new javax.swing.JTextField();
        order = new javax.swing.JTextField();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("jprinteradmin/language"); // NOI18N
        setTitle(bundle.getString("REQUEST-VALUES SETTINGS")); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setToolTipText(bundle.getString("TOOLTIPREQUESTVALUEID")); // NOI18N
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText(bundle.getString("ID")); // NOI18N

        jLabel2.setText(bundle.getString("NAME")); // NOI18N

        jLabel3.setText(bundle.getString("DATA-TYPE")); // NOI18N

        name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nameKeyTyped(evt);
            }
        });

        jButtonDelete.setText(bundle.getString("DELETE")); // NOI18N
        jButtonDelete.setEnabled(false);
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonUpdate.setText(bundle.getString("UPDATE")); // NOI18N
        jButtonUpdate.setEnabled(false);
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jButtonAdd.setText(bundle.getString("ADD")); // NOI18N
        jButtonAdd.setEnabled(false);
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonNew.setText(bundle.getString("NEW")); // NOI18N
        jButtonNew.setEnabled(false);
        jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewActionPerformed(evt);
            }
        });

        statusBar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout statusBarLayout = new javax.swing.GroupLayout(statusBar);
        statusBar.setLayout(statusBarLayout);
        statusBarLayout.setHorizontalGroup(
            statusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusBarLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        statusBarLayout.setVerticalGroup(
            statusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusBarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusBarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        id.setEnabled(false);

        datatype.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "String", "Integer" }));

        jLabel4.setText(bundle.getString("SEARCHFIELD")); // NOI18N

        jLabel5.setText(bundle.getString("VIEW IN MAIN-WINDOW")); // NOI18N

        jLabel6.setText(bundle.getString("IDENTIFICATION-FIELD")); // NOI18N

        jLabel7.setText(bundle.getString("ORDER")); // NOI18N

        jComboBoxRequestMethods.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxRequestMethodsItemStateChanged(evt);
            }
        });

        jCheckBoxDefaultMethod.setText(bundle.getString("DEFAULT METHOD")); // NOI18N
        java.util.ResourceBundle bundle1 = java.util.ResourceBundle.getBundle("jprinteradmin/language_de_DE"); // NOI18N
        jCheckBoxDefaultMethod.setToolTipText(bundle1.getString("USED FOR NEW (UNKNOWN) PRINTER TYPES")); // NOI18N
        jCheckBoxDefaultMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxDefaultMethodActionPerformed(evt);
            }
        });

        jButtonDeleteMethod.setText(bundle.getString("DELETE")); // NOI18N
        jButtonDeleteMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteMethodActionPerformed(evt);
            }
        });

        jTextFieldNethodName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldNethodNameKeyTyped(evt);
            }
        });

        jButtonAddMethod.setText(bundle.getString("ADD NEW")); // NOI18N
        jButtonAddMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddMethodActionPerformed(evt);
            }
        });

        jSeparator1.setBackground(new java.awt.Color(102, 102, 102));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel8.setText(bundle.getString("COUNTER")); // NOI18N

        jLabel9.setText(bundle.getString("REQUEST-METHOD SETTINGS")); // NOI18N

        jLabel10.setText(bundle.getString("REQUEST-KIND")); // NOI18N

        jComboBoxRequestKind.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "snmp", "html", "internal", "userdefined" }));
        jComboBoxRequestKind.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxRequestKindItemStateChanged(evt);
            }
        });

        jButtonChRkSt.setText(bundle.getString("CHANGE REQUEST-SETTING")); // NOI18N
        jButtonChRkSt.setEnabled(false);
        jButtonChRkSt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChRkStActionPerformed(evt);
            }
        });

        jLabel11.setText(bundle1.getString("ID")); // NOI18N

        jTextFieldRkId.setToolTipText(bundle.getString("TOOLTIPREQUESTVALUEID")); // NOI18N
        jTextFieldRkId.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(jButtonNew)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(142, 142, 142)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel2))))
                            .addComponent(jLabel5)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(identity)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(name)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButtonUpdate)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButtonAdd))
                                .addComponent(datatype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(counter)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(searchField)
                                    .addComponent(view))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(order, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(29, 29, 29)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBoxRequestKind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldRkId, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel9)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addComponent(jButtonChRkSt)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBoxRequestMethods, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxDefaultMethod)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonDeleteMethod)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextFieldNethodName, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonAddMethod)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxRequestMethods, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxDefaultMethod)
                        .addComponent(jButtonDeleteMethod))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonAddMethod)
                        .addComponent(jTextFieldNethodName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(3, 3, 3)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(jButtonNew)
                                    .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(datatype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(view, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(searchField)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(order, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(identity)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(counter)
                                            .addComponent(jLabel8)))
                                    .addComponent(jLabel6))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButtonDelete)
                                    .addComponent(jButtonUpdate)
                                    .addComponent(jButtonAdd)))
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(statusBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jComboBoxRequestKind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(jTextFieldRkId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonChRkSt))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void adjustButtons() {
        if (this.jTable1.getSelectedRow() >= 0) {
            int[] selectedRow = jTable1.getSelectedRows();
            //System.out.println("ID:"+dialog.jTable1.getValueAt(selectedRow[0], 0).toString());
            lock islock = Database.getLock("REQUEST_VALUES", Integer.parseInt(this.jTable1.getValueAt(selectedRow[0], 0).toString())); //NOI18N
            if (islock.isLocked == false) {
                jButtonUpdate.setEnabled(true);
                jButtonDelete.setEnabled(true);
                jButtonChRkSt.setEnabled(true);
                changeValues(selectedRow[0], this);
            } else {
                jButtonChRkSt.setEnabled(false);
                jButtonUpdate.setEnabled(false);
                jButtonDelete.setEnabled(false);
                statusBarLabel.setText(java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("DATASET IS LOCKED. USER:") + islock.user + java.util.ResourceBundle.getBundle("jprinteradmin/language").getString(". DATE: ") + islock.datetime + ".");  //NOI18N

            }
        }
    }
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            Database.delLock("REQUEST_METHOD", this.requestMethodLock);  //NOI18N
            Database.delLock("REQUEST_VALUES", Integer.parseInt(id.getText())); //NOI18N
        } catch (Exception ex) {
        }
        jprinteradmin.JPrinterAdmin.mw.setEnabled(true);
    }//GEN-LAST:event_formWindowClosing

    private void jButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewActionPerformed
        Database.delLock("REQUEST_VALUES", Integer.parseInt(id.getText())); //NOI18N
        requestKindId = ""; //NOI18N
        requestKind = ""; //NOI18N
        jComboBoxRequestMethods.setEnabled(false);
        name.setEnabled(true);
        id.setText(""); //NOI18N
        name.setText(""); //NOI18N
        order.setText(""); //NOI18N
        datatype.setSelectedIndex(0);
        searchField.setSelected(false);
        view.setSelected(false);
        identity.setSelected(false);
        jTextFieldRkId.setText(""); //NOI18N
        this.jComboBoxRequestKind.setSelectedIndex(0);
        this.jComboBoxRequestMethods.setSelectedIndex(0);
        this.counter.setSelected(false);

        jButtonDelete.setEnabled(false);
        jButtonUpdate.setEnabled(false);
        jButtonNew.setEnabled(false);
        jButtonAdd.setEnabled(false);
        jButtonChRkSt.setEnabled(false);
        statusBarLabel.setText(java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("READY TO ADD DATASET"));
    }//GEN-LAST:event_jButtonNewActionPerformed

    private Document createNumericDocumentWithMaxLength(final int maxLength) {

        Document doc = new PlainDocument() {
            @Override
            public void insertString(int offs, String str, AttributeSet a)
                    throws BadLocationException {
                if (getLength() + str.length() > maxLength) {
                    return;
                }
                if (!str.matches("^[\\d]*$")) //NOI18N
                {
                    return;
                }


                super.insertString(offs, str, a);
            }
        };
        return doc;
    }

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed

        try {
            try (Statement st = Database.conn.createStatement()) {
                int idi = Database.getNextId("REQUEST_VALUES"); //NOI18N
                int viewi = 0;
                if (view.isSelected()) {
                    viewi = 1;
                }
                int searchi = 0;
                if (searchField.isSelected()) {
                    searchi = 1;
                }
                int identityi = 0;
                if (identity.isSelected()) {
                    identityi = 1;
                }
                int counteri = 0;
                if (counter.isSelected()) {
                    counteri = 1;
                }
                String query = "INSERT INTO REQUEST_VALUES (id, " + Utility.dbQuotes + "name" + Utility.dbQuotes + ", " + Utility.dbQuotes + "type" + Utility.dbQuotes + ", " + Utility.dbQuotes + "view" + Utility.dbQuotes + ", " + Utility.dbQuotes + "search" + Utility.dbQuotes + ", identification, " + Utility.dbQuotes + "order" + Utility.dbQuotes + ", counter) "
                        + "VALUES (" + idi + ", '" + Utility.escapeSqlString(this.name.getText()) + "', '" + Utility.escapeSqlString(this.datatype.getSelectedItem().toString()) + "', " + viewi + ", " + searchi + ", " + identityi + ", 0" + order.getText() + ", " + counteri + ")";  //NOI18N //NOI18N //NOI18N
                st.executeUpdate(query);
                if ("userdefined".equals(this.jComboBoxRequestKind.getSelectedItem())) { //NOI18N

                    st.execute("INSERT INTO REQUEST_METHOD_VALUES (request_method_id, request_values_id, kind, request_method_values_x_id) " + //NOI18N
                            " VALUES (0, " + idi + ", 'userdefined', 0)"); //NOI18N
                }
                statusBarLabel.setText(java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("DATASET ADDED."));
            }
        } catch (SQLException ex) {
            statusBarLabel.setText(java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("AN ERROR OCCURRED") + ex.getLocalizedMessage());
            Logger.getLogger(RequestValuesSettings.class.getName()).log(Level.SEVERE, null, ex);
        }
        getDBValues(this, requestMethods.get(this.jComboBoxRequestMethods.getSelectedIndex()));
        this.jTable1.setRowSelectionInterval(this.jTable1.getRowCount() - 1, this.jTable1.getRowCount() - 1);
        Rectangle rect = jTable1.getCellRect(this.jTable1.getRowCount() - 1, 0, true);
        jTable1.scrollRectToVisible(rect);
        adjustButtons();

    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        try {
            try (Statement st = Database.conn.createStatement()) {
                String query = "DELETE FROM REQUEST_VALUES WHERE id=" + id.getText(); //NOI18N //NOI18N //NOI18N //NOI18N //NOI18N //NOI18N //NOI18N //NOI18N
                st.executeUpdate(query);
                String queryDelPV = "DELETE FROM PRINTER_VALUES WHERE request_value_id=" + id.getText();
                String queryDelPCV = "DELETE FROM PRINTER_COUNTER_VALUES WHERE request_value_id=" + id.getText();
                int pvDeleted = st.executeUpdate(queryDelPV);
                int pcvDeleted = st.executeUpdate(queryDelPCV);
                Database.delLock("REQUEST_VALUES", Integer.parseInt(id.getText())); //NOI18N
                String stBarText = (java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("DATASET DELTED."));
                if (pvDeleted > 0) {
                    stBarText += pvDeleted + java.util.ResourceBundle.getBundle("Settings/Bundle").getString(" PRINTER-VALUES DELTED.");
                }
                if (pcvDeleted > 0) {
                    stBarText += pcvDeleted + java.util.ResourceBundle.getBundle("jprinteradmin/language").getString(" PRINTER-COUNTER-VALUES DELTED.");
                }
                switch (requestKind) {
                    case "snmp":
                        st.execute("DELETE FROM REQUEST_METHOD_VALUES_SNMP WHERE id=" + requestKindId);
                        break;
                    case "html":
                        st.execute("DELETE FROM REQUEST_METHOD_VALUES_HTML WHERE id=" + requestKindId);
                        st.execute("DELETE FROM REQUEST_METHOD_VALUES_HTML WHERE id=" + requestKindId);
                        st.execute("DELETE FROM REQUEST_METHOD_VALUES_HTML_POSTDATA WHERE rmvh_id=" + requestKindId);
                        st.execute("DELETE FROM REQUEST_METHOD_VALUES_HTML_POSTDATA WHERE rmvh_id=" + requestKindId);
                        st.execute("DELETE FROM REQUEST_METHOD_VALUES_HTML_STRINGREMOVES WHERE rmvh_id=" + requestKindId);
                        break;
                }
                statusBarLabel.setText(stBarText);
            }
        } catch (SQLException ex) {
            Logger.getLogger(RequestValuesSettings.class.getName()).log(Level.SEVERE, null, ex);
        }

        getDBValues(this, requestMethods.get(this.jComboBoxRequestMethods.getSelectedIndex()));

    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed

        try {
            try (Statement st = Database.conn.createStatement()) {
                int viewUpdate = 0;
                if (view.isSelected()) {
                    viewUpdate = 1;
                }
                int searchUpdate = 0;
                if (searchField.isSelected()) {
                    searchUpdate = 1;
                }
                int identityUpdate = 0;
                if (identity.isSelected()) {
                    identityUpdate = 1;
                    if (identity.isEnabled() == true) {
                        changeIdentityField(Integer.parseInt(id.getText()));
                        st.execute("UPDATE REQUEST_VALUES SET " + Utility.dbQuotes + "identification" + Utility.dbQuotes + " = 0");
                    }
                }
                String query = "UPDATE REQUEST_VALUES SET " + Utility.dbQuotes + "name" + Utility.dbQuotes + " = '" + Utility.escapeSqlString(name.getText()) + "', " + Utility.dbQuotes + "type" + Utility.dbQuotes + " = '" + datatype.getSelectedItem() + "', " + Utility.dbQuotes + "view" + Utility.dbQuotes + " = " + viewUpdate + ", " + Utility.dbQuotes + "search" + Utility.dbQuotes + " = " + searchUpdate + ", " + Utility.dbQuotes + "identification" + Utility.dbQuotes + " = " + identityUpdate + ", " + Utility.dbQuotes + "order" + Utility.dbQuotes + " = 0" + order.getText() + " WHERE id = " + id.getText();
                st.executeUpdate(query);
            }
        } catch (SQLException ex) {
            Logger.getLogger(RequestValuesSettings.class.getName()).log(Level.SEVERE, null, ex);
        }
        getDBValues(this, requestMethods.get(this.jComboBoxRequestMethods.getSelectedIndex()));
        statusBarLabel.setText(java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("DATASET CHANGED"));
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void changeIdentityField(int newField) {
        try {
            Statement st = Database.conn.createStatement();
            Statement st2 = Database.conn.createStatement();
            Statement st3 = Database.conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT " + Utility.dbQuotes + "id" + Utility.dbQuotes + ", identificationString FROM PRINTER");
            while (rs.next()) {
                ResultSet rs2 = st2.executeQuery("SELECT request_value FROM PRINTER_VALUES WHERE printer_id=" + rs.getString(1) + " AND request_value_id=" + newField);
                while (rs2.next()) {
                    st3.execute("UPDATE PRINTER SET identificationString = '" + rs2.getString(1) + "' WHERE " + Utility.dbQuotes + "id" + Utility.dbQuotes + " = " + Utility.escapeSqlString(rs.getString(1)));
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(RequestValuesSettings.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void jCheckBoxDefaultMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxDefaultMethodActionPerformed
        try {

            int def = 0;
            Statement st = Database.conn.createStatement();
            if (jCheckBoxDefaultMethod.isSelected()) {
                def = 1;
                st.execute("UPDATE REQUEST_METHOD SET defaultMethod=0");
            } else {
                st.execute("UPDATE REQUEST_METHOD SET defaultMethod=1 WHERE id=0");
            }

            st.execute("UPDATE REQUEST_METHOD SET defaultMethod=" + def + " WHERE id=" + requestMethods.get(this.jComboBoxRequestMethods.getSelectedIndex()));
            this.getRequestMethods(this.jComboBoxRequestMethods.getSelectedIndex());
        } catch (SQLException ex) {
            Logger.getLogger(RequestValuesSettings.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCheckBoxDefaultMethodActionPerformed

    private void jTextFieldNethodNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNethodNameKeyTyped
        if (jTextFieldNethodName.getText().length() > 0) {
            jButtonAddMethod.setEnabled(true);
        } else {
            jButtonAddMethod.setEnabled(false);
        }
    }//GEN-LAST:event_jTextFieldNethodNameKeyTyped

    private void jButtonAddMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddMethodActionPerformed
        if (requestMethodNames.contains(jTextFieldNethodName.getText())) {
            statusBarLabel.setText(java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("NAME IS ALREADY IN DATABSE."));
        } else {
            try {
                Statement st = Database.conn.createStatement();
                st.execute("INSERT INTO REQUEST_METHOD (id, " + Utility.dbQuotes + "name" + Utility.dbQuotes + ", defaultMethod) \n"
                        + " VALUES (" + Database.getNextId("REQUEST_METHOD") + ", '" + Utility.escapeSqlString(jTextFieldNethodName.getText()) + "', 0)");
                this.statusBarLabel.setText(java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("REQUEST-METHOD") + " " + jTextFieldNethodName.getText() + " " + java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("ADDED"));
                jTextFieldNethodName.setText("");
            } catch (SQLException ex) {
                Logger.getLogger(RequestValuesSettings.class.getName()).log(Level.SEVERE, null, ex);
            }
            getRequestMethods(0);
        }
    }//GEN-LAST:event_jButtonAddMethodActionPerformed

    private void jComboBoxRequestMethodsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxRequestMethodsItemStateChanged
        if (this.id.getText().length() > 0) {
            Database.delLock("REQUEST_VALUES", Integer.parseInt(this.id.getText()));
        }
        try {
            if (this.requestMethodLock != requestMethods.get(jComboBoxRequestMethods.getSelectedIndex()) || this.requestMethodLock == -1) {
                Database.delLock("REQUEST_METHOD", this.requestMethodLock);

                System.out.println(requestMethods.get(this.jComboBoxRequestMethods.getSelectedIndex()));
                lock islock = Database.getLock("REQUEST_METHOD", requestMethods.get(this.jComboBoxRequestMethods.getSelectedIndex()));
                if (islock.isLocked == true) {
                    this.jButtonDeleteMethod.setEnabled(false);
                    this.jCheckBoxDefaultMethod.setEnabled(false);
                    statusBarLabel.setText(java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("DATASET IS LOCKED. USER:") + islock.user + java.util.ResourceBundle.getBundle("jprinteradmin/language").getString(". DATE: ") + islock.datetime + ".");
                } else {
                    this.jButtonDeleteMethod.setEnabled(true);
                }
                Database.setLock("REQUEST_METHOD", requestMethods.get(this.jComboBoxRequestMethods.getSelectedIndex()));
                this.jCheckBoxDefaultMethod.setSelected(requestMethodDefault.get((jComboBoxRequestMethods.getSelectedIndex())));
                requestMethodLock = requestMethods.get(this.jComboBoxRequestMethods.getSelectedIndex());
                if (requestMethods.get(this.jComboBoxRequestMethods.getSelectedIndex()) == 0) {
                    this.jButtonDeleteMethod.setEnabled(false);
                } else {
                    this.jButtonDeleteMethod.setEnabled(true);
                }
                getDBValues(this, requestMethods.get(this.jComboBoxRequestMethods.getSelectedIndex()));
            }
        } catch (Exception e) {
            System.out.println(e.getStackTrace());
        }
    }//GEN-LAST:event_jComboBoxRequestMethodsItemStateChanged

    private void jButtonDeleteMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteMethodActionPerformed
        try {
            String sttext;
            Statement st = Database.conn.createStatement();

            st.execute("DELETE FROM REQUEST_METHOD WHERE id=" + requestMethods.get(this.jComboBoxRequestMethods.getSelectedIndex()));
            st.execute("DELETE FROM REQUEST_METHOD_VALUES WHERE request_method_id=" + requestMethods.get(this.jComboBoxRequestMethods.getSelectedIndex()));
            sttext = java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("REQUESTMETHOD {0} IS DELETED."), new Object[]{this.jComboBoxRequestMethods.getSelectedItem()});
            if (requestMethodDefault.get(this.jComboBoxRequestMethods.getSelectedIndex()) == true) {
                st.execute("UPDATE REQUEST_METHOD SET defaultMethod=1 WHERE id=0");
                sttext += java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("DEFAULT METHOD IS NOW {0}DEFAULT{1}"), new Object[]{Utility.dbQuotes, Utility.dbQuotes});
            }

            int numberDeviceTypeChanged;

            numberDeviceTypeChanged = st.executeUpdate("UPDATE DEVICE_TYPES SET request_method_id='0' WHERE request_method_id='" + requestMethods.get(this.jComboBoxRequestMethods.getSelectedIndex()) + "'");

            if (numberDeviceTypeChanged > 0) {
                sttext += java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("THE REQUEST METHOD ID OF {0} DEVICE(S) TYPES HAD BEEN CHANGED TO {1}0{2}"), new Object[]{numberDeviceTypeChanged, Utility.dbQuotes, Utility.dbQuotes});
            }
            this.statusBarLabel.setText(sttext);
            this.getRequestMethods(0);
        } catch (SQLException ex) {
            Logger.getLogger(RequestValuesSettings.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonDeleteMethodActionPerformed

    private void nameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameKeyTyped
        if (jButtonNew.isEnabled() == false && name.getText().length() > 0) {
            jButtonAdd.setEnabled(true);
        } else {
            jButtonAdd.setEnabled(false);
        }
    }//GEN-LAST:event_nameKeyTyped
    public static Settings.requestValueSettings.Snmp snmp;
    public static Settings.requestValueSettings.Html html;

    private void jButtonChRkStActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChRkStActionPerformed
        System.out.println(this.jComboBoxRequestKind.getSelectedItem());
        String rk = this.jComboBoxRequestKind.getSelectedItem().toString();
        switch (rk) {
            case "snmp":
                snmp = new Settings.requestValueSettings.Snmp(this, true);
                snmp.setLocation(130, 130);
                System.out.println("rk: " + RequestValuesSettings.requestKind);
                if ("snmp".equals(RequestValuesSettings.requestKind)) {
                    String oid = null;
                    String hc = null;
                    try {
                        Statement stat = Database.conn.createStatement();
                        ResultSet rs = stat.executeQuery("SELECT oid,hexStringConversion FROM REQUEST_METHOD_VALUES_SNMP WHERE id=" + RequestValuesSettings.requestKindId);
                        while (rs.next()) {
                            oid = rs.getString(1);
                            hc = rs.getString(2);
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(RequestValuesSettings.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    snmp.jTextPaneId.setText(RequestValuesSettings.requestKindId);
                    snmp.jTextPaneOid.setText(oid);
                    if ("1".equals(hc)) {
                        snmp.jCheckBoxHsc.setSelected(true);
                    }
                    System.out.println(RequestValuesSettings.requestKindId);

                } else {
                    snmp.jButtonDelete.setEnabled(false);
                }
                snmp.setVisible(true);
                break;
            case "html":
                html = new Settings.requestValueSettings.Html(this, true);
                html.setLocation(130, 130);
                System.out.println("rk: " + RequestValuesSettings.requestKind);
                if ("html".equals(RequestValuesSettings.requestKind)) {
                    try {
                        Statement stat = Database.conn.createStatement();
                        ResultSet rs = stat.executeQuery("SELECT "
                                + "request_url, "
                                + "authentication_url, "
                                + "cookie_name, "
                                + Utility.dbQuotes + "get" + Utility.dbQuotes + ", "
                                + Utility.dbQuotes + "value" + Utility.dbQuotes + ", " + Utility.dbQuotes + "tag" + Utility.dbQuotes + " FROM request_method_values_html WHERE id=" + RequestValuesSettings.requestKindId);

                        while (rs.next()) {
                            html.jTextFieldRequestURL.setText(rs.getString(1));
                            html.jTextFieldAuthenticationUrl.setText(rs.getString(2));
                            html.jTextFieldCookieName.setText(rs.getString(3));
                            html.jComboBoxGet.setSelectedItem(rs.getString(4));
                            html.jSpinnerValueNr.setValue(rs.getInt(5));
                            html.jTextFieldTag.setText(rs.getString(6));
                        }
                        rs.close();
                        rs = stat.executeQuery("SELECT "
                                + Utility.dbQuotes + "String" + Utility.dbQuotes
                                + " FROM request_method_values_html_stringremoves WHERE rmvh_id=" + RequestValuesSettings.requestKindId);
                        int i = 0;
                        while (rs.next()) {
                            html.jTableStringRemoves.setValueAt(rs.getString(1), i++, 0);
                        }
                        rs.close();
                        rs = stat.executeQuery("SELECT "
                                + Utility.dbQuotes + "variable" + Utility.dbQuotes + ", "
                                + Utility.dbQuotes + "value" + Utility.dbQuotes
                                + " FROM request_method_values_html_postdata WHERE rmvh_id=" + RequestValuesSettings.requestKindId);
                        i = 0;
                        while (rs.next()) {
                            html.jTablePostData.setValueAt(rs.getString(1), i, 0);
                            html.jTablePostData.setValueAt(rs.getString(2), i++, 1);
                        }


                    } catch (SQLException ex) {
                        Logger.getLogger(RequestValuesSettings.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    html.jTextPaneId.setText(RequestValuesSettings.requestKindId);


                    System.out.println(RequestValuesSettings.requestKindId);

                } else {
                    html.jButtonDelete.setEnabled(false);
                }
                html.setVisible(true);
                break;
            case "userdefined":
                try {
                    int res = Database.conn.createStatement().executeUpdate("UPDATE REQUEST_METHOD_VALUES SET kind='userdefined', request_method_values_x_id = 0 WHERE request_values_id=" + this.id.getText() + " AND request_method_id=" + jComboBoxRequestMethods.getSelectedIndex());
                    if (res == 0) {
                        String updateStatement = "INSERT INTO REQUEST_METHOD_VALUES (request_method_id, request_values_id, kind, request_method_values_x_id) "
                                + " VALUES (" + jComboBoxRequestMethods.getSelectedIndex() + ", " + id.getText() + ", 'userdefined', 0)";
                        Database.conn.createStatement().execute(updateStatement);
                    }
                    Database.delLock("REQUEST_VALUES", Integer.parseInt(this.id.getText()));
                    getDBValues(this, requestMethods.get(this.jComboBoxRequestMethods.getSelectedIndex()));
                } catch (SQLException ex) {
                    Logger.getLogger(RequestValuesSettings.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "internal":
                try {
                    int res = Database.conn.createStatement().executeUpdate("UPDATE REQUEST_METHOD_VALUES SET kind='internal', request_method_values_x_id = " + this.jTextFieldRkId.getText() + " WHERE request_values_id=" + this.id.getText() + " AND request_method_id=" + jComboBoxRequestMethods.getSelectedIndex());
                    if (res == 0) {
                        String updateStatement = "INSERT INTO REQUEST_METHOD_VALUES (request_method_id, request_values_id, kind, request_method_values_x_id) "
                                + " VALUES (" + jComboBoxRequestMethods.getSelectedIndex() + ", " + id.getText() + ", 'internal', " + this.jTextFieldRkId.getText() + ")";
                        Database.conn.createStatement().execute(updateStatement);
                    }
                    Database.delLock("REQUEST_VALUES", Integer.parseInt(this.id.getText()));
                    getDBValues(this, requestMethods.get(this.jComboBoxRequestMethods.getSelectedIndex()));
                } catch (SQLException ex) {
                    Logger.getLogger(RequestValuesSettings.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
        }

    }//GEN-LAST:event_jButtonChRkStActionPerformed

    private void jComboBoxRequestKindItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxRequestKindItemStateChanged
        this.jTextFieldRkId.setText("");
        if ("internal".equals(this.jComboBoxRequestKind.getSelectedItem())) {
            this.jTextFieldRkId.setEnabled(true);
        } else {
            this.jTextFieldRkId.setEnabled(false);
        }
    }//GEN-LAST:event_jComboBoxRequestKindItemStateChanged

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        changeValues(jTable1.getSelectedRow(), this);
    }//GEN-LAST:event_jTable1KeyReleased

    public static void changeValues(int row, RequestValuesSettings dialog) {
        dialog.jComboBoxRequestMethods.setEnabled(true);
        dialog.jButtonChRkSt.setEnabled(true);
        try {
            Database.delLock("REQUEST_VALUES", Integer.parseInt(dialog.id.getText())); //NOI18N
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
        dialog.name.setEnabled(true);
        Database.setLock("REQUEST_VALUES", Integer.parseInt(dialog.jTable1.getValueAt(row, 0).toString())); //NOI18N
        dialog.id.setText(dialog.jTable1.getValueAt(row, 0).toString());
        dialog.name.setText(dialog.jTable1.getValueAt(row, 1).toString());
        dialog.datatype.setSelectedItem(dialog.jTable1.getValueAt(row, 2).toString());

        if (dialog.jTable1.getValueAt(row, 3).toString().equals("1")) { //NOI18N
            dialog.view.setSelected(true);
        } else {
            dialog.view.setSelected(false);
        }
        if (dialog.jTable1.getValueAt(row, 4).toString().equals("1")) { //NOI18N
            dialog.searchField.setSelected(true);
        } else {
            dialog.searchField.setSelected(false);
        }
        if (dialog.jTable1.getValueAt(row, 5).toString().equals("1")) { //NOI18N
            dialog.identity.setSelected(true);
            dialog.identity.setEnabled(false);
            dialog.jButtonDelete.setEnabled(false);
        } else {
            dialog.identity.setSelected(false);
            dialog.identity.setEnabled(true);
            dialog.jButtonDelete.setEnabled(true);
        }
        if (dialog.jTable1.getValueAt(row, 7).toString().equals("1")) { //NOI18N
            dialog.counter.setSelected(true);
        } else {
            dialog.counter.setSelected(false);
        }
        dialog.order.setText(dialog.jTable1.getValueAt(row, 6).toString());


        dialog.jButtonUpdate.setEnabled(true);
        dialog.jButtonNew.setEnabled(true);
        dialog.jButtonAdd.setEnabled(false);
        try {
            dialog.jComboBoxRequestKind.setSelectedItem(dialog.jTable1.getValueAt(row, 8).toString());
            RequestValuesSettings.requestKind = dialog.jTable1.getValueAt(row, 8).toString();
            dialog.jTextFieldRkId.setText(dialog.jTable1.getValueAt(row, 9).toString());
            RequestValuesSettings.requestKindId = dialog.jTable1.getValueAt(row, 9).toString();
        } catch (Exception e) {
            RequestValuesSettings.requestKind = "";
            dialog.jComboBoxRequestKind.setSelectedIndex(0);
            RequestValuesSettings.requestKindId = "";
            dialog.jTextFieldRkId.setText("");
        }
        dialog.statusBarLabel.setText(java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("EDIT DATASET ") + dialog.jTable1.getValueAt(row, 0).toString());
    }
    public static ArrayList<String[]> requestMethodArray = new ArrayList<>();
    public static String requestKindId = "";
    public static String requestKind = "";

    public static int getRequestValueId(String name) {
        int rmid = 0;
        for (int i = 0; i < requestMethodArray.size(); i++) {
            if (requestMethodArray.get(i)[1].equals(name)) {
                rmid = Integer.parseInt(requestMethodArray.get(i)[0]);
            }
        }
        return rmid;
    }

    public void getRequestMethods(int selectedIndex) {

        this.jComboBoxRequestMethods.removeAllItems();
        requestMethods.clear();
        requestMethodDefault.clear();
        requestMethodNames.clear();
        try {
            Statement st = Database.conn.createStatement();
            ResultSet rs = st.executeQuery("select id,name,defaultMethod from REQUEST_METHOD"); //NOI18N
            while (rs.next()) {
                String itemName;
                requestMethods.add(rs.getInt(1));

                requestMethodNames.add(rs.getString(2));
                if (rs.getBoolean(3) == true) {
                    itemName = rs.getString(2) + java.util.ResourceBundle.getBundle("jprinteradmin/language").getString(" (D)");
                    requestMethodDefault.add(true);
                } else {
                    itemName = rs.getString(2);
                    requestMethodDefault.add(false);
                }
                this.jComboBoxRequestMethods.addItem(itemName);
            }
            if (selectedIndex > 0) {
                this.jComboBoxRequestMethods.setSelectedIndex(selectedIndex);
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public static List<Integer> requestMethods = new ArrayList<>();
    public static List<Boolean> requestMethodDefault = new ArrayList<>();
    public static List<String> requestMethodNames = new ArrayList<>();

    public static void getDBValues(RequestValuesSettings dialog, int requestMethodId) {
        try {
            Statement st = Database.conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT id, " + Utility.dbQuotes + "name" + Utility.dbQuotes + ", " + Utility.dbQuotes + "type" + Utility.dbQuotes + ","
                    + " " + Utility.dbQuotes + "view" + Utility.dbQuotes + ", " + Utility.dbQuotes + "search" + Utility.dbQuotes + ", identification, "
                    + "" + Utility.dbQuotes + "order" + Utility.dbQuotes + ", counter, kind, request_method_values_x_id "
                    + "FROM REQUEST_VALUES "
                    + "LEFT JOIN REQUEST_METHOD_VALUES on "
                    + "REQUEST_METHOD_VALUES.request_values_id=REQUEST_VALUES.id "
                    + "AND (REQUEST_METHOD_VALUES.request_method_id=" + requestMethodId + " OR REQUEST_METHOD_VALUES.request_method_id IS NULL)");
            ArrayList<String[]> list = new ArrayList<>();

            while (rs.next()) {
                //( (DefaultTableModel) dialog.jTable1.getModel() ).insertRow(icolumn+1, rs.getInt(1));
                list.add(new String[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9), rs.getString(10)});
            }
            //String[] reqM=new String[requestMethodArray.size()];
            String[] reqM = new String[10];
            for (int ii = 0; ii < requestMethodArray.size(); ii++) {
                reqM[ii] = (String) requestMethodArray.get(ii)[1];
            }
            //dialog.datatype.setModel(new javax.swing.DefaultComboBoxModel(reqM));
            Object[][] obj = new Object[list.size()][8];
            for (int ii = 0; ii < list.size(); ii++) {
                obj[ii] = (String[]) list.get(ii);
            }
            dialog.jTable1.setAutoCreateRowSorter(true);
            dialog.jTable1.updateUI();
            //dialog.jTable1.removeAll();
            dialog.jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    obj,
                    new String[]{
                java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("ID"), java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("NAME"), java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("DATA-TYPE"), java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("VIEW IN MAIN-WINDOW"), java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("SEARCHFIELD"), java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("IDENTIFICATION-FIELD"), java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("ORDER"), "counter", "kind", "id"
            }) {
                Class[] types = new Class[]{
                    java.lang.Integer.class,
                    java.lang.String.class,
                    java.lang.String.class,
                    java.lang.String.class,
                    java.lang.String.class,
                    java.lang.String.class,
                    java.lang.String.class,
                    java.lang.String.class,
                    java.lang.String.class,
                    java.lang.String.class
                };
                boolean[] canEdit = new boolean[]{
                    false, false, false, false, false, false, false, false, false, false
                };

                @Override
                public Class getColumnClass(int columnIndex) {
                    return types[columnIndex];
                }

                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });
        } catch (SQLException ex) {
            Logger.getLogger(RequestValuesSettings.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public int requestMethodLock = -1;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox counter;
    private javax.swing.JComboBox datatype;
    public javax.swing.JTextField id;
    private javax.swing.JCheckBox identity;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonAddMethod;
    private javax.swing.JButton jButtonChRkSt;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonDeleteMethod;
    private javax.swing.JButton jButtonNew;
    public javax.swing.JButton jButtonUpdate;
    private javax.swing.JCheckBox jCheckBoxDefaultMethod;
    public javax.swing.JComboBox jComboBoxRequestKind;
    public javax.swing.JComboBox jComboBoxRequestMethods;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldNethodName;
    public javax.swing.JTextField jTextFieldRkId;
    private javax.swing.JTextField name;
    private javax.swing.JTextField order;
    private javax.swing.JCheckBox searchField;
    private javax.swing.JPanel statusBar;
    private javax.swing.JLabel statusBarLabel;
    private javax.swing.JCheckBox view;
    // End of variables declaration//GEN-END:variables
}
