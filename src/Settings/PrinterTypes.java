/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Settings;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import jprinteradmin.Database;
import jprinteradmin.Utility;

/**
 *
 * @author stefan
 */
public final class PrinterTypes extends javax.swing.JDialog {

    public PrinterTypes(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        getDBValues();
        this.setLocation(100, 100);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        dname = new javax.swing.JTextField();
        jButtonDelete = new javax.swing.JButton();
        jButtonUpdate = new javax.swing.JButton();
        jButtonAdd = new javax.swing.JButton();
        jButtonNew = new javax.swing.JButton();
        statusBar = new javax.swing.JPanel();
        statusBarLabel = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        requestMethod = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("jprinteradmin/language"); // NOI18N
        jLabel1.setText(bundle.getString("ID")); // NOI18N

        jLabel2.setText(bundle.getString("NAME")); // NOI18N

        jLabel3.setText(bundle.getString("REQUESTMETHOD")); // NOI18N

        jButtonDelete.setText(bundle.getString("DELETE")); // NOI18N
        jButtonDelete.setEnabled(false);
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonUpdate.setText(bundle.getString("UPDATE")); // NOI18N
        jButtonUpdate.setEnabled(false);
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jButtonAdd.setText(bundle.getString("ADD")); // NOI18N
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonNew.setText(bundle.getString("NEW")); // NOI18N
        jButtonNew.setEnabled(false);
        jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewActionPerformed(evt);
            }
        });

        statusBar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout statusBarLayout = new javax.swing.GroupLayout(statusBar);
        statusBar.setLayout(statusBarLayout);
        statusBarLayout.setHorizontalGroup(
            statusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusBarLayout.createSequentialGroup()
                .addComponent(statusBarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 214, Short.MAX_VALUE))
        );
        statusBarLayout.setVerticalGroup(
            statusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusBarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusBarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        id.setEnabled(false);

        requestMethod.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonNew)
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(dname)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButtonUpdate)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButtonAdd)))
                            .addComponent(requestMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButtonNew)
                    .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(dname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(requestMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDelete)
                    .addComponent(jButtonUpdate)
                    .addComponent(jButtonAdd))
                .addGap(31, 31, 31)
                .addComponent(statusBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            Database.delLock("DEVICE_TYPES", Integer.parseInt(id.getText())); //NOI18N
        } catch (Exception ex) {
        }
        jprinteradmin.JPrinterAdmin.mw.setEnabled(true);
    }//GEN-LAST:event_formWindowClosing

    private void jButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewActionPerformed
        Database.delLock("DEVICE_TYPES", Integer.parseInt(id.getText())); //NOI18N
        dname.setEnabled(true);
        id.setText(""); //NOI18N
        dname.setText(""); //NOI18N


        jButtonDelete.setEnabled(false);
        jButtonUpdate.setEnabled(false);
        jButtonNew.setEnabled(false);
        jButtonAdd.setEnabled(true);
        statusBarLabel.setText(java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("READY TO ADD DATASET"));
    }//GEN-LAST:event_jButtonNewActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed

        try {
            try (Statement st = Database.conn.createStatement()) {
                String query = "INSERT INTO device_types (id, name, request_method_id) VALUES (" + Database.getNextId("DEVICE_TYPES") + ", '" + Utility.escapeSqlString(dname.getText()) + "', '" + getRequestMethodId(requestMethod.getSelectedItem().toString()) + "');";  //NOI18N
                st.executeUpdate(query);
            }
        } catch (SQLException ex) {
            Logger.getLogger(PrinterTypes.class.getName()).log(Level.SEVERE, null, ex);
        }
        getDBValues();
        statusBarLabel.setText(java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("DATASET ADDED."));
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        try {
            try (Statement st = Database.conn.createStatement()) {
                String query = "DELETE FROM DEVICE_TYPES WHERE id=" + id.getText(); //NOI18N //NOI18N //NOI18N //NOI18N
                st.executeUpdate(query);
                Database.delLock("DEVICE_TYPES", Integer.parseInt(id.getText()));
                statusBarLabel.setText(java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("DATASET DELTED."));
            }
        } catch (SQLException ex) {
            Logger.getLogger(PrinterTypes.class.getName()).log(Level.SEVERE, null, ex);
        }

        getDBValues();

    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed

        try {
            try (Statement st = Database.conn.createStatement()) {
                String query = "UPDATE DEVICE_TYPES SET request_method_id='" + getRequestMethodId(requestMethod.getSelectedItem().toString()) + "' WHERE id=" + id.getText(); //NOI18N
                System.out.println(query);
                st.executeUpdate(query);
            }
        } catch (SQLException ex) {
            Logger.getLogger(PrinterTypes.class.getName()).log(Level.SEVERE, null, ex);
        }
        getDBValues();
        statusBarLabel.setText(java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("DATASET CHANGED"));
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        jTable1ValueChanged();
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        jTable1ValueChanged();
    }//GEN-LAST:event_jTable1KeyReleased

    private void jTable1ValueChanged() {
        if (this.jTable1.getSelectedRows().length == 1) {
            changeValues(this.jTable1.getSelectedRow());
        } else {
            changeValues(-1);
        }
    }

    public void changeValues(int row) {
        if (row != -1) {
            try {
                Database.delLock("DEVICE_TYPES", Integer.parseInt(this.id.getText())); //NOI18N
            } catch (Exception ex) {
                //ex.printStackTrace();
            }
            this.dname.setEnabled(false);
            Database.setLock("DEVICE_TYPES", Integer.parseInt(this.jTable1.getValueAt(row, 0).toString())); //NOI18N
            this.id.setText(this.jTable1.getValueAt(row, 0).toString());
            this.dname.setText(this.jTable1.getValueAt(row, 1).toString());
            this.requestMethod.setSelectedItem(this.jTable1.getValueAt(row, 2).toString());
            this.jButtonDelete.setEnabled(true);
            this.jButtonUpdate.setEnabled(true);
            this.jButtonNew.setEnabled(true);
            this.jButtonAdd.setEnabled(false);
            this.statusBarLabel.setText(java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("EDIT DATASET ") + this.jTable1.getValueAt(row, 0).toString());

        } else {
            try {
                Database.delLock("DEVICE_TYPES", Integer.parseInt(this.id.getText())); //NOI18N
            } catch (Exception ex) {
                //ex.printStackTrace();
            }
            this.dname.setEnabled(true);
            this.id.setText("");
            this.dname.setText("");
            this.requestMethod.setSelectedItem("");
            this.jButtonDelete.setEnabled(false);
            this.jButtonUpdate.setEnabled(false);
            this.jButtonNew.setEnabled(false);
            this.jButtonAdd.setEnabled(true);
        }
    }
    public static ArrayList<String[]> requestMethodArray = new ArrayList<>();

    public static int getRequestMethodId(String name) {
        int rmid = 0;
        for (int i = 0; i < requestMethodArray.size(); i++) {
            if (requestMethodArray.get(i)[1].equals(name)) {
                rmid = Integer.parseInt(requestMethodArray.get(i)[0]);
            }
        }
        return rmid;
    }

    public void getDBValues() {

        try {
            Statement st = Database.conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT DEVICE_TYPES.id, DEVICE_TYPES.name, REQUEST_METHOD.name FROM DEVICE_TYPES" + //NOI18N
                    " LEFT JOIN REQUEST_METHOD ON REQUEST_METHOD.id=DEVICE_TYPES.request_method_id"); //NOI18N
            ArrayList<String[]> list = new ArrayList<>();

            while (rs.next()) {
                //( (DefaultTableModel) this.jTable1.getModel() ).insertRow(icolumn+1, rs.getInt(1));
                list.add(new String[]{rs.getString(1), rs.getString(2), rs.getString(3)});


            }
            ResultSet rs2 = st.executeQuery("SELECT id, name FROM REQUEST_METHOD ORDER BY id");
            requestMethodArray.clear();
            while (rs2.next()) {
                requestMethodArray.add(new String[]{rs2.getString(1), rs2.getString(2)});
            }
            String[] reqM = new String[requestMethodArray.size()];
            for (int ii = 0; ii < requestMethodArray.size(); ii++) {
                reqM[ii] = (String) requestMethodArray.get(ii)[1];
            }
            requestMethod.setModel(new javax.swing.DefaultComboBoxModel(reqM));
            Object[][] obj = new Object[list.size()][4];
            for (int ii = 0; ii < list.size(); ii++) {
                obj[ii] = (String[]) list.get(ii);
            }
            jTable1.setAutoCreateRowSorter(true);
            jTable1.updateUI();
            //this.jTable1.removeAll();
            System.out.println("here");
            this.jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    obj,
                    new String[]{
                java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("ID"), java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("NAME"), java.util.ResourceBundle.getBundle("jprinteradmin/language").getString("REQUESTMETHOD")
            }) {
                Class[] types = new Class[]{
                    java.lang.Integer.class, java.lang.String.class, java.lang.String.class
                };
                boolean[] canEdit = new boolean[]{
                    false, false, false
                };

                @Override
                public Class getColumnClass(int columnIndex) {
                    return types[columnIndex];
                }

                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });
        } catch (SQLException ex) {
            Logger.getLogger(PrinterTypes.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField dname;
    private javax.swing.JTextField id;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonNew;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox requestMethod;
    private javax.swing.JPanel statusBar;
    private javax.swing.JLabel statusBarLabel;
    // End of variables declaration//GEN-END:variables
}
